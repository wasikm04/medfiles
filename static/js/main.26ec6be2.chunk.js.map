{"version":3,"sources":["components/providers/CardProvider.jsx","components/NavBar.jsx","components/helpers/defaultLabels.js","components/card/PatientDetails.jsx","components/models/ObjectFields.jsx","components/models/appointment/MakeAppointment.jsx","components/card/DoctorCard.jsx","components/Home.jsx","components/helpers/Login.jsx","components/helpers/ProtectedRoute.jsx","components/helpers/Logout.jsx","components/models/appointment/Appointment.jsx","components/models/appointment/Appointments.jsx","components/models/DoctorList.jsx","components/models/medical-test/MedicalTest.jsx","components/models/medical-test/MedicalTests.jsx","components/models/prescription/Prescription.jsx","components/models/prescription/Prescriptions.jsx","components/models/referral/Referral.jsx","components/models/referral/Referrals.jsx","components/models/treatment/Information.jsx","components/models/treatment/Treatment.jsx","components/models/treatment/Treatments.jsx","components/helpers/Register.jsx","components/helpers/Welcome.jsx","components/card/PatientCard.jsx","App.jsx","index.jsx"],"names":["CardContext","React","createContext","CardConsumer","Consumer","CardProvider","state","card","isAuthenticated","isDoctor","doctorCard","user","updateCard","updatedCard","setState","prevState","Provider","value","this","props","children","Component","useStyles","makeStyles","theme","root","display","appBar","width","marginLeft","drawer","flexShrink","drawerPaper","background","colour","toolbar","mixins","color","textDecoration","link","PermanentDrawerLeft","classes","useContext","className","CssBaseline","Drawer","variant","paper","anchor","to","Typography","align","justify","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","labels","userMail","firstName","lastName","dateBirth","sex","address","phoneNumber","insuranceType","prescriptions","dateTo","doctorMail","numberPWZ","departmentNFZ","permissions","medicines","medicalTests","testDate","testName","authorMail","patientMail","parametersWithReference","fileId","referrals","date","purpose","recognition","treatments","numberICD","symptomsAndDiagnosis","information","title","prescriptionRefundNumber","pharmacotherapy","medicalAnalysisAndRecommendations","pesel","comment","prescriptionId","dateTime","doctorFullName","specializations","container","flexWrap","textField","PatientDetails","handleChange","event","persist","target","id","handleSubmit","preventDefault","require","post","headers","withCredentials","then","response","console","log","alert","data","catch","error","bind","Object","keys","map","key","Array","isArray","Grid","item","xs","sm","TextField","required","disabled","label","type","margin","fullWidth","defaultValue","InputLabelProps","shrink","onChange","name","Fragment","direction","alignItems","gutterBottom","Paper","elevation","square","onSubmit","spacing","prepareFields","Button","ConnectedPatientDetails","objectFields","e","_id","multiline","row","spec","component","aria-label","MakeAppointment","appointments","reserve","get","choosen","put","items","filter","Table","TableHead","TableRow","TableCell","TableBody","app","scope","onClick","showAppointmentsTable","DoctorCard","getDoctorCard","match","params","ConnectedDoctorCard","Home","username","getCard","withCookies","Login","isStatus","formData","FormData","append","password","axios","bool","includes","localStorage","setItem","status","getRole","length","cookies","getItem","pathname","from","location","Container","maxWidth","autoComplete","autoFocus","CircularProgress","validateForm","ConnectedLogin","ProtectedRoute","rest","render","Logout","invalidateSession","remove","clear","ConnectedLogout","Appointment","appointment","deleteReservation","update","saveAppointment","Appointments","panel","isExpanded","expanded","addAppointment","newelement","path","styles","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","split","style","ExpansionPanelDetails","renderAppointments","ConnectedAppointments","DoctorList","changeSelect","search","handlePageClick","selected","getPage","handleSearch","doctors","renderTable","content","doctor","page","previousLabel","nextLabel","breakLabel","pageCount","totalPages","marginPagesDisplayed","pageRangeDisplayed","onPageChange","subContainerClassName","breakClassName","breakLinkClassName","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","activeClassName","MedicalTest","medicalTest","download","blob","filename","loadFile","imagedata","files","image","upload","testId","saveMedicalTest","completedMedicalTest","href","rel","accept","htmlFor","MedicalTests","handleChangePanel","pushToParametersList","parametersList","parameter","addMedicalTest","handleParameterChange","test","Date","toISOString","prepareForms","param","ConnectedMedicalTests","prescription","savePrescription","completedPrescription","Prescriptions","pushToMedicinesList","medicinesList","medicine","addPrescription","handleMedicineChange","prep","ConnectedPrescriptions","Referral","referral","saveReferral","completedReferral","Referrals","addReferral","ConnectedReferrals","Information","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","Treatment","handleTab","newValue","treatment","listName","newInformation","updateList","saveTreatment","completedTreatment","symptoms","medicalAnalysis","tempDate","AppBar","position","Tabs","indicatorColor","textColor","scrollButtons","centered","Tab","info","Treatments","addTreatment","ConnectedTreatments","Register","email","repassword","Welcome","Card","paragraph","PatientCard","ConnectedPatientCard","marginTop","App","exact","ReactDOM","document","getElementById"],"mappings":"wzBAEO,IAAMA,EAAcC,IAAMC,gBAEpBC,EAAeH,EAAYI,SA2BzBC,E,2MAxBbC,MAAQ,CACNC,KAAM,KACNC,iBAAiB,EACjBC,UAAU,EACVC,WAAW,KACXC,KAAM,GACNC,WAAY,SAAAC,GAAW,OAAI,EAAKD,WAAWC,K,EAG/CD,WAAa,SAAAC,GACX,EAAKC,UAAS,SAAAC,GAAS,O,yVAAA,IAClBA,EADkB,GAElBF,O,wEAKL,OACE,kBAACb,EAAYgB,SAAb,CAAsBC,MAAOC,KAAKZ,OAC/BY,KAAKC,MAAMC,c,GApBSC,aCmBrBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,QAEbC,OAAQ,CACJC,MAAM,eAAD,OANO,IAMP,OACLC,WAPY,KAShBC,OAAQ,CACJF,MAVY,IAWZG,WAAY,GAEhBC,YAAa,CACTJ,MAdY,IAeZK,WAAY,kBACZC,OAAQ,sBAEZC,QAASX,EAAMY,OAAOD,QAEtBD,OAAQ,CACJD,WAAY,kBACZI,MAAO,QACPC,eAAgB,QAEpBC,KAAM,CACFD,eAAgB,OAChBD,MAAO,0BAKA,SAASG,IACpB,IAAMC,EAAUnB,IAD0B,EAEEoB,qBAAW1C,GAA/CW,EAFkC,EAElCA,KAAMH,EAF4B,EAE5BA,gBAAiBC,EAFW,EAEXA,SAE/B,OACI,yBAAKkC,UAAWF,EAAQhB,MACpB,kBAACmB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACIF,UAAWF,EAAQX,OACnBgB,QAAQ,YACRL,QAAS,CACLM,MAAON,EAAQT,aAEnBgB,OAAO,QACP,kBAAC,IAAD,CAAML,UAAWF,EAAQP,OAAQe,GAAG,KAChC,yBAAKN,UAAWF,EAAQN,SACpB,kBAACe,EAAA,EAAD,CAAYP,UAAWF,EAAQN,QAASW,QAAQ,KAAKK,MAAM,SAASC,QAAQ,UAA5E,cAKR,kBAACC,EAAA,EAAD,MACC7C,EACG,kBAAC8C,EAAA,EAAD,KACI,kBAAC,IAAD,CAAML,GAAG,SACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,4BAG/B,kBAACN,EAAA,EAAD,CAASV,UAAWF,EAAQP,SAC3BzB,EACG,kBAAC,IAAD,CAAMwC,GAAI,gBAAkBtC,GACxB,kBAAC4C,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,oBAI/B,6BACI,kBAAC,IAAD,CAAMV,GAAG,SACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,qBAG/B,kBAAC,IAAD,CAAMV,GAAG,kBACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,cAG/B,kBAAC,IAAD,CAAMV,GAAG,kBACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,cAG/B,kBAAC,IAAD,CAAMV,GAAG,cACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,kBAG/B,kBAAC,IAAD,CAAMV,GAAG,eACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,yBAG/B,kBAAC,IAAD,CAAMV,GAAG,gBACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,uBAKvC,kBAAC,IAAD,CAAMV,GAAG,iBACG,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,aAGvC,kBAACN,EAAA,EAAD,CAASV,UAAWF,EAAQP,SAC5B,kBAAC,IAAD,CAAMe,GAAG,WACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,eAKnC,kBAACL,EAAA,EAAD,KACI,kBAAC,IAAD,CAAML,GAAG,UACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,gBAG/B,kBAAC,IAAD,CAAMV,GAAG,aACL,kBAACM,EAAA,EAAD,CAAUC,QAAM,EAACb,UAAWF,EAAQF,MAChC,kBAACkB,EAAA,EAAD,CAAcd,UAAWF,EAAQF,MAAM,kBAAC,IAAD,OACvC,kBAACmB,EAAA,EAAD,CAAcC,QAAS,mBAIvC,kBAACN,EAAA,EAAD,Q,+BCxHDO,GA3CA,CACXC,SAAU,cACVC,UAAW,YACXC,SAAU,WACVC,UAAW,iBACXC,IAAK,iBACLC,QAAS,yBACTC,YAAa,iBACbC,cAAe,oBACfC,cAAe,UACfC,OAAQ,0BACRC,WAAY,sBACZC,UAAW,iCACXC,cAAe,kBACfC,YAAa,wBACbC,UAAW,OACXC,aAAc,UACdC,SAAU,eACVC,SAAU,gBACVC,WAAY,wBACZC,YAAY,iBACZC,wBAAyB,wBACzBC,OAAQ,mBACRC,UAAU,cACVC,KAAM,OACNC,QAAS,kBACTC,YAAa,cACbC,WAAY,qBACZC,UAAW,YACXC,qBAAsB,oBACtBC,YAAa,OACbC,MAAM,qBACNC,yBAAyB,uBACzBC,gBAAiB,iBACjBC,kCAAmC,WACnCC,MAAO,QACPC,QAAS,YACTC,eAAe,gBACfC,SAAS,OACTC,eAAe,+BACfC,gBAAgB,iB,mPC/BpB,IAAM3D,GAAU,CACd4D,UAAW,CACT3E,QAAS,OACT4E,SAAU,QAEZC,UAAW,CACT3E,MAAO,MAGL4E,G,YACJ,WAAYrF,GAAQ,IAAD,8BACjB,4CAAMA,KAQRsF,aAAe,SAAAC,GACbA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACZ,IAAIR,E,2VAAI,IAAQQ,EAAUR,MAE1B,OADAA,EAAKmG,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MAC9B,CAAEV,YAdM,EAmBnBuG,aAAe,SAAAJ,GACbA,EAAMK,iBACQC,EAAQ,IAMhBC,KAAK,QAAS,EAAK3G,MAAMC,KALhB,CACb2G,QAAS,CACP,eAAgB,qBAG0B,CAAEC,iBAAiB,IAC9DC,MAAK,SAACC,GACL,EAAKlG,MAAMP,WAAW,CACpBL,KAAM,EAAKD,MAAMC,OAEnB+G,QAAQC,IAAIF,GACZG,MAAMH,EAASI,SAEhBC,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACZH,MAAM,yGAnCV,EAAKlH,MAAQ,CACXC,KAAM,EAAKY,MAAMZ,KACjBE,SAAU,EAAKU,MAAMV,UAEvB,EAAKqG,aAAe,EAAKA,aAAac,KAAlB,gBANH,E,2EAyCLrH,EAAME,GAAW,IAAD,OAC5B,OAAQoH,OAAOC,KAAKvH,GAAMwH,KAAI,SAAAC,GAC5B,OAAMC,MAAMC,QAAQ3H,EAAKyH,KAAiB,WAARA,GAA4B,QAARA,EAgD7C,KA/CK,cAARA,EACK,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAG,kBAACC,GAAA,EAAD,CACxCP,IAAKA,EACLQ,UAAQ,EACRC,SAAUhI,EACVoG,GAAImB,EACJU,MAAO9E,GAAOoE,GACdW,KAAK,OACLC,OAAO,SACPC,WAAS,EACT/F,QAAQ,SACRgG,aAAcvI,EAAKyH,GACnBe,gBAAiB,CACfC,QAAQ,GAEVC,SAAU,EAAKxC,gBAGA,YAARuB,EACF,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAG,kBAACC,GAAA,EAAD,CACxCP,IAAKA,EACLnB,GAAImB,EACJQ,UAAQ,EACRK,WAAS,EACTJ,SAAUhI,EACVyI,KAAMlB,EACNU,MAAO9E,GAAOoE,GACd/G,MAAOV,EAAKyH,GACZiB,SAAU,EAAKxC,aACfmC,OAAO,SACP9F,QAAQ,YAIH,kBAACqF,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAhC,IAAoC,kBAACC,GAAA,EAAD,CACzCC,UAAQ,EACRK,WAAS,EACThC,GAAImB,EACJS,SAAUhI,EACViI,MAAO9E,GAAOoE,GACdc,aAAcvI,EAAKyH,GACnBiB,SAAU,EAAKxC,aACfmC,OAAO,SACP9F,QAAQ,iB,+BAWhB,OACE,kBAAC,IAAMqG,SAAP,KAEI,kBAAChB,GAAA,EAAD,CACE9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,kBAIF,kBAACC,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GAC3B,0BAAM9G,UAAWF,GAAQ4D,UAAWqD,SAAUxI,KAAK4F,cACjD,kBAACqB,GAAA,EAAD,CACE9B,WAAS,EACTjD,QAAQ,SACRuG,QAAS,GAERzI,KAAK0I,cAAc1I,KAAKZ,MAAMC,KAAMW,KAAKZ,MAAMG,WAEhDS,KAAKZ,MAAMG,SAeX,KAdF,kBAAC0H,GAAA,EAAD,CACE9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACQ,GAAA,EAAD,CACElB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJV,kB,GAhIezB,aAiJvByI,GAA0B,SAAA3I,GAAK,OACnC,kBAAChB,EAAD,MACG,gBAAGI,EAAH,EAAGA,KAAMK,EAAT,EAASA,WAAYH,EAArB,EAAqBA,SAArB,OACC,kBAAC,GAAD,iBACMU,EADN,CAEEZ,KAAMA,EACNK,WAAYA,EACZH,SAAUA,SCxCHsJ,GAvHM,SAACxJ,EAAME,EAAUgG,GAClC,OAAQoB,OAAOC,KAAKvH,GAAMwH,KAAI,SAAAC,GAC1B,GAAY,QAARA,GAAyB,aAARA,EACjB,OAAO,KACJ,GAAY,SAARA,GAA0B,WAARA,GAA4B,aAARA,EAC7C,OAAO,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GACnC,kBAACC,GAAA,EAAD,CACIP,IAAKA,EACLQ,UAAQ,EACRC,UAAWhI,EACXoG,GAAImB,EACJU,MAAO9E,GAAOoE,GACdW,KAAK,OACLC,OAAO,SACPC,WAAS,EACT/F,QAAQ,SACRgG,aAAcvI,EAAKyH,GACnBe,gBAAiB,CACbC,QAAQ,GAEZC,SAAU,SAACe,GAAD,OAAOvD,EAAauD,EAAGzJ,EAAK0J,SAI7C,GAAY,aAARjC,EACL,OAAO,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GACnC,kBAACC,GAAA,EAAD,CACIP,IAAKA,EACLQ,UAAQ,EACRC,UAAWhI,EACXoG,GAAImB,EACJU,MAAO9E,GAAOoE,GACdW,KAAK,iBACLC,OAAO,SACPC,WAAS,EACT/F,QAAQ,SACRgG,aAAcvI,EAAKyH,GACnBe,gBAAiB,CACbC,QAAQ,GAEZC,SAAU,SAACe,GAAD,OAAOvD,EAAauD,EAAGzJ,EAAK0J,SAI7C,GAAY,WAARjC,EACL,OAAO,KAEN,GAAY,gBAARA,EACL,OAAO,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GACnC,kBAACC,GAAA,EAAD,CACIE,SAAUhI,EACVoI,WAAS,EACThC,GAAImB,EACJU,MAAO9E,GAAOoE,GACdc,aAAcvI,EAAKyH,GACnBiB,SAAU,SAACe,GAAD,OAAOvD,EAAauD,EAAGzJ,EAAK0J,MACtCrB,OAAO,SACP9F,QAAQ,YAGf,GAAY,YAARkF,EACL,OAAO,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GACnC,kBAACC,GAAA,EAAD,CACIM,WAAS,EACThC,GAAImB,EACJU,MAAO9E,GAAOoE,GACdc,aAAcvI,EAAKyH,GACnBiB,SAAU,SAACe,GAAD,OAAOvD,EAAauD,EAAGzJ,EAAK0J,MACtCrB,OAAO,SACP9F,QAAQ,YAGf,GAAY,gBAARkF,EACL,OAAO,kBAACG,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GACnC,kBAACC,GAAA,EAAD,CACIM,WAAS,EACTqB,WAAS,EACTC,IAAK,EACLtD,GAAImB,EACJS,UAAWhI,EACXiI,MAAO9E,GAAOoE,GACdc,aAAcvI,EAAKyH,GACnBiB,SAAU,SAACe,GAAD,OAAOvD,EAAauD,EAAGzJ,EAAK0J,MACtCrB,OAAO,SACP9F,QAAQ,YAGf,GAAImF,MAAMC,QAAQ3H,EAAKyH,IAAO,CAC/B,IAAIoC,EAAO7J,EAAKyH,GAAKD,KAAI,SAACK,GAAD,OACrB,kBAAC7E,EAAA,EAAD,CAAUyE,IAAKI,EAAM5E,QAAM,GACvB,kBAACE,EAAA,EAAD,CAAcsE,IAAKI,EAAMzE,QAASyE,QAE1C,OAAO,kBAACD,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GACnC,kBAACH,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAAC/B,WAAS,EAACjD,QAAQ,SAASiF,GAAI,EAAGC,GAAI,GACvD,kBAACpF,EAAA,EAAD,CAAYJ,QAAQ,MACfc,GAAOoE,KAGhB,kBAAC1E,EAAA,EAAD,CAAM+G,UAAU,MAAMC,aAAW,6BAC5BF,IAIT,OAAO,kBAACjC,GAAA,EAAD,CAAMH,IAAKA,EAAKI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAhC,IAAoC,kBAACC,GAAA,EAAD,CACvCC,UAAQ,EACRK,WAAS,EACTJ,UAAWhI,EACXoG,GAAImB,EACJU,MAAO9E,GAAOoE,GACdc,aAAcvI,EAAKyH,GACnBiB,SAAU,SAACe,GAAD,OAAOvD,EAAauD,EAAGzJ,EAAK0J,MACtCrB,OAAO,SACP9F,QAAQ,gB,kDC/GHyH,G,YACjB,WAAYpJ,GAAQ,IAAD,8BACf,4CAAMA,KACDb,MAAQ,CACTiE,WAAY,EAAKpD,MAAMoD,WACvBS,YAAa,EAAK7D,MAAM6D,YACxBwF,aAAc,MAElB,EAAKC,QAAU,EAAKA,QAAQ7C,KAAb,gBAPA,E,iFAUC,IAAD,OACDZ,EAAQ,IAChB0D,IAAI,gBAAkBxJ,KAAKZ,MAAMiE,WAAa,CAAE4C,iBAAiB,IAClEC,MAAK,SAACC,GACH,EAAKvG,SAAS,CAAE0J,aAAcnD,EAASI,UAE1CC,OAAM,SAAUC,GACbH,MAAMG,GACNL,QAAQC,IAAII,Q,8BAIhBgD,EAAS3F,GAAc,IAAD,OAC1B,GAAe,MAAX2F,EAAiB,CACjBA,EAAQ3F,YAAcA,EACRgC,EAAQ,IAMhB4D,IAAI,eAAgBD,EALX,CACXzD,QAAS,CACL,eAAgB,qBAGmB,CAAEC,iBAAiB,IACzDC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,IAAMwD,EAAQ,EAAKvK,MAAMkK,aAAaM,QAAO,SAAA1C,GAAI,OAAIA,EAAK6B,MAAQU,EAAQV,OAC1E,EAAKnJ,SAAS,CAAE0J,aAAcK,IAC9BrD,MAAM,yCAGTE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,2G,4CAKAgD,EAAcxF,GAAc,IAAD,OAC7C,OAAQ,kBAACuE,GAAA,EAAD,KACJ,kBAACwB,GAAA,EAAD,CAAOT,aAAW,gBACd,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,oBACA,kBAACA,GAAA,EAAD,CAAW/H,MAAM,SAAjB,aACA,kBAAC+H,GAAA,EAAD,CAAW/H,MAAM,SAAjB,gBAGR,kBAACgI,GAAA,EAAD,KACKX,EAAazC,KAAI,SAAAqD,GAAG,OACjB,kBAACH,GAAA,EAAD,CAAUjD,IAAKoD,EAAInB,KACf,kBAACiB,GAAA,EAAD,CAAWb,UAAU,KAAKgB,MAAM,OAC5B,kBAAC9C,GAAA,EAAD,CACII,KAAK,iBACLC,OAAO,SACPC,WAAS,EACTJ,UAAQ,EACR3F,QAAQ,SACRgG,aAAcsC,EAAIlF,YAG1B,kBAACgF,GAAA,EAAD,CAAW/H,MAAM,SAASiI,EAAIpF,SAC9B,kBAACkF,GAAA,EAAD,CAAW/H,MAAM,SAAQ,kBAAC0G,GAAA,EAAD,CACrByB,QAAS,kBAAM,EAAKb,QAAQW,EAAKpG,IAEjC6B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aALa,wB,+BAmB7C,OACI,kBAAC,IAAMqG,SAAP,KACI,kBAACI,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,kBAACtB,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,kBAIJ,kBAACnB,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,gBAEoB,MAA3BlC,KAAKZ,MAAMkK,aAAuBtJ,KAAKqK,sBAAsBrK,KAAKZ,MAAMkK,aAActJ,KAAKZ,MAAM0E,aAAe,Y,GA3G5F3D,a,mOCJvCmK,G,YACF,WAAYrK,GAAQ,IAAD,8BACf,4CAAMA,KAQVsF,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAIL,E,2VAAU,IAAQK,EAAUL,YAEhC,OADAA,EAAWgG,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACpC,CAAEP,kBAdE,EAqCnBoG,aAAe,SAAAJ,GACXA,EAAMK,iBACQC,EAAQ,IAMhB4D,IAAI,eAAgB,EAAKtK,MAAMI,WALtB,CACXwG,QAAS,CACL,eAAgB,qBAGiC,CAAEC,iBAAiB,IACvEC,MAAK,SAACC,GACH,EAAKlG,MAAMP,WAAW,CAClBF,WAAY,EAAKJ,MAAMI,aAE3B4G,QAAQC,IAAIF,GACZG,MAAM,yCAETE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,yGArDd,EAAKlH,MAAQ,CACTI,WAAY,EAAKS,MAAMT,WACvBD,SAAU,EAAKU,MAAMV,UAEzB,EAAKqG,aAAe,EAAKA,aAAac,KAAlB,gBANL,E,iFAoBV1G,KAAKZ,MAAMG,UACZS,KAAKuK,cAAcvK,KAAKC,MAAMuK,MAAMC,OAAOpH,c,oCAIrCA,GAAa,IAAD,OACRyC,EAAQ,IAChB0D,IAAI,gBAAkBnG,EAAa,IAAK,CAAE4C,iBAAiB,IAC5DC,MAAK,SAACC,GACH,EAAKvG,SAAS,CAAEJ,WAAY2G,EAASI,UAExCC,OAAM,SAAUC,GACbH,MAAMG,GACNL,QAAQC,IAAII,Q,+BA2BpB,OACI,kBAAC,IAAMwB,SAAP,KACI,kBAACI,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,kBAACtB,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,kBAIJ,0BAAM3G,UAAW,CACb0D,UAAW,CACP3E,QAAS,OACT4E,SAAU,SAEfoD,SAAUxI,KAAK4F,cACa,OAA1B5F,KAAKZ,MAAMI,WACZ,kBAACyH,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,gBAEP2G,GAAa7I,KAAKZ,MAAMI,WAAYQ,KAAKZ,MAAMG,SAAUS,KAAKuF,eAEjE,KACDvF,KAAKZ,MAAMG,SACZ,kBAAC0H,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,WASsB,OAA1B5B,KAAKZ,MAAMI,WAAsB,kBAAC,GAAD,CAAiB6D,WAAYrD,KAAKZ,MAAMI,WAAWmD,SAAUmB,YAAa9D,KAAKC,MAAMR,OAAW,Y,GAxGhIU,aA8HVuK,GAda,SAAAzK,GAAK,OAC7B,kBAAChB,EAAD,MACK,gBAAGO,EAAH,EAAGA,WAAYD,EAAf,EAAeA,SAAUG,EAAzB,EAAyBA,WAAYD,EAArC,EAAqCA,KAArC,OACG,kBAAC,GAAD,iBACQQ,EADR,CAEIT,WAAYA,EACZE,WAAYA,EACZH,SAAUA,EACVE,KAAMA,SC7HhBkL,G,YAEJ,WAAY1K,GAAQ,IAAD,8BACjB,4CAAMA,KACDb,MAAQ,CACXwL,SAAU,EAAK3K,MAAMR,KACrBH,gBAAiB,EAAKW,MAAMX,gBAC5BC,SAAU,EAAKU,MAAMV,UALN,E,uEASR,IAAD,OACMuG,EAAQ,IAChB0D,IAAI,SAAWxJ,KAAKZ,MAAMwL,SAAW,IAAK,CAAE3E,iBAAiB,IAChEC,MAAM,SAACC,GACNC,QAAQC,IAAIF,EAASI,MACrB,EAAKtG,MAAMP,WAAW,CAAEL,KAAM8G,EAASI,UAExCC,OAAM,SAAUC,GACfH,MAAMG,GACNL,QAAQC,IAAII,Q,sCAID,IAAD,OACAX,EAAQ,IAChB0D,IAAI,gBAAkBxJ,KAAKZ,MAAMwL,SAAU,IAAM,CAAE3E,iBAAiB,IACvEC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASI,MACrB,EAAKtG,MAAMP,WAAW,CAAEF,WAAY2G,EAASI,UAE9CC,OAAM,SAAUC,GACfH,MAAMG,GACNL,QAAQC,IAAII,Q,0CAKZzG,KAAKZ,MAAMG,SACe,MAAzBS,KAAKC,MAAMT,YAAsBQ,KAAKC,MAAMT,WAAW6D,aAAerD,KAAKZ,MAAMwL,UAClF5K,KAAKuK,gBAILvK,KAAK6K,Y,+BAMT,OACE,6BACE,qCAAW7K,KAAKZ,MAAMwL,SAAtB,U,GApDWzK,aAyEJ2K,gBAhBO,SAAA7K,GAAK,OACzB,kBAAChB,EAAD,MACG,gBAAGK,EAAH,EAAGA,gBAAgBI,EAAnB,EAAmBA,WAAWL,EAA9B,EAA8BA,KAAMG,EAApC,EAAoCA,WAAaC,EAAjD,EAAiDA,KAAMF,EAAvD,EAAuDA,SAAvD,OACC,kBAAC,GAAD,iBACMU,EADN,CAEEX,gBAAiBA,EACjBG,KAAMA,EACNF,SAAUA,EACVG,WAAYA,EACZL,KAAMA,EACNG,WAAYA,W,oBC5DduL,G,YACF,WAAY9K,GAAQ,IAAD,8BACf,4CAAMA,KAgBVsF,aAAe,SAAAC,GACX,EAAK5F,SAAL,eACK4F,EAAME,OAAOC,GAAKH,EAAME,OAAO3F,SAnBrB,EAiDnB6F,aAAe,SAAAJ,GACX,EAAK5F,SAAS,CAAEoL,UAAU,IAC1BxF,EAAMK,iBACN,IAAIoF,EAAW,IAAIC,SACnBD,EAASE,OAAO,WAAY,EAAK/L,MAAMwL,UACvCK,EAASE,OAAO,WAAY,EAAK/L,MAAMgM,UACvC,IAAMC,EAAQvF,EAAQ,IAOtBuF,EAAMtF,KAAK,SAAUkF,EANN,CACXjF,QAAS,CACL,eAAgB,yBAKnBE,MAAK,SAACC,GACHkF,EAAM7B,IAAI,cAAgB,EAAKpK,MAAMwL,SAAW,IAAK,CAAE3E,iBAAiB,IACnEC,MAAK,SAACC,GACH,IAAImF,IAAOnF,EAASI,KAAKgF,SAAS,eAClC,EAAKtL,MAAMP,WAAW,CAClBH,SAAU+L,EACVhM,iBAAiB,EACjBG,KAAM,EAAKL,MAAMwL,WAErB,EAAKhL,SAAS,CACVwL,SAAU,GACV9L,iBAAiB,EACjB0L,UAAU,IAEdQ,aAAaC,QAAQ,WAAY,EAAKrM,MAAMwL,aAE/CpE,OAAM,SAACC,GACJL,QAAQC,IAAII,GACZ,EAAK7G,SAAS,CACV8L,OAAQ,2CAAwCjF,EAChDuE,UAAU,IAEd5E,QAAQC,IAAII,SAGvBD,OAAM,SAACC,GACJ,EAAK7G,SAAS,CACV8L,OAAQ,sBAAwBjF,EAChCuE,UAAU,IAEd5E,QAAQC,IAAII,OA3FpB,EAAKrH,MAAQ,CACTE,gBAAiB,EAAKW,MAAMX,gBAC5BsL,SAAU,GACVQ,SAAU,GACVJ,UAAU,EACVU,OAAQ,IAEZ,EAAK9F,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKiF,QAAU,EAAKA,QAAQjF,KAAb,gBAVA,E,4EAcf,OAAO1G,KAAKZ,MAAMwL,SAASgB,OAAS,GAAK5L,KAAKZ,MAAMgM,SAASQ,OAAS,I,8BASlEhB,GAAW,IAAD,OACA9E,EAAQ,IAChB0D,IAAI,cAAgBoB,EAAW,IAAK,CAAE3E,iBAAiB,IACxDC,MAAK,SAACC,GACH,GAAIA,EAASI,KAAKgF,SAAS,aAAc,CACrC,IAAID,IAAOnF,EAASI,KAAKgF,SAAS,eAClC,EAAKtL,MAAMP,WAAW,CAClBH,SAAU+L,EACVhM,iBAAiB,EACjBG,KAAMmL,IAEV,EAAKhL,SAAS,CACVN,iBAAiB,U,0CAMhB,IACTuM,EAAY7L,KAAKC,MAAjB4L,QACJjB,EAAWY,aAAaM,QAAQ,YACN,MAA1BD,EAAQrC,IAAI,YAAkC,MAAZoB,GAClC5K,KAAK2L,QAAQf,K,+BAqDjB,OAAI5K,KAAKZ,MAAME,gBACH,kBAAC,IAAD,CAAUyC,GAAI,CAAEgK,SAAU,QAAS3M,MAAO,CAAE4M,KAAMhM,KAAKC,MAAMgM,aAGjE,kBAACC,GAAA,EAAD,CAAW/C,UAAU,OAAOgD,SAAS,MACjC,kBAACzK,EAAA,EAAD,MACA,0BAAM8G,SAAUxI,KAAK4F,cACjB,kBAAC5D,EAAA,EAAD,CAAYC,MAAM,SAASkH,UAAU,KAAKvH,QAAQ,MAAlD,aAGA,kBAACyF,GAAA,EAAD,CACIzF,QAAQ,WACR8F,OAAO,SACPJ,UAAQ,EACRK,WAAS,EACThC,GAAG,WACH6B,MAAM,SACNQ,KAAK,QACLoE,aAAa,cACbC,WAAS,EACTtE,SAAU/H,KAAKuF,eAEnB,kBAAC8B,GAAA,EAAD,CACIzF,QAAQ,WACR8F,OAAO,SACPJ,UAAQ,EACRK,WAAS,EACTK,KAAK,WACLR,MAAM,aACNC,KAAK,WACL9B,GAAG,WACHyG,aAAa,mBACbrE,SAAU/H,KAAKuF,eAElBvF,KAAKZ,MAAM4L,SACR,kBAAChJ,EAAA,EAAD,CAAYJ,QAAQ,KAAKuH,UAAU,KAAKlH,MAAM,SAASyF,OAAO,UAC1D,kBAAC4E,GAAA,EAAD,CAAkBrK,MAAM,YAE5B,kBAAC0G,GAAA,EAAD,CACIpB,UAAWvH,KAAKuM,eAChB9E,KAAK,SACLE,WAAS,EACTxG,MAAM,UACNS,QAAQ,aALZ,YASR,kBAACI,EAAA,EAAD,CAAYJ,QAAQ,KAAKuH,UAAU,KAAKlH,MAAM,SAASyF,OAAO,UACzD1H,KAAKZ,MAAMsM,a,GAnJhBvL,aA2KLqM,GAbQ,SAAAvM,GAAK,OACxB,kBAAChB,EAAD,MACK,gBAAGK,EAAH,EAAGA,gBAAiBI,EAApB,EAAoBA,WAApB,OACG,kBAAC,GAAD,iBACQO,EADR,CAEIX,gBAAiBA,EACjBI,WAAYA,S,QCrJb+M,GAlBQ,SAAC,GAAuC,IAA1BtM,EAAyB,EAApCgJ,UAAyBuD,EAAW,8BAClDpN,EAAoBkC,qBAAW1C,GAA/BQ,gBACR,OAGQ,kBAAC,IAAD,iBAAWoN,EAAX,CAAiBC,OAAS,SAAC1M,GAAD,OACtBX,EACI,kBAACa,EAAcF,GAEf,kBAAC,IAAD,CAAU8B,GAAG,gBCZ3B6K,GAAS,SAAC3M,GAAW,IACf4L,EAAY5L,EAAZ4L,QAKR,OAJAgB,KACAhB,EAAQiB,OAAO,WACftB,aAAauB,QACb9M,EAAMP,WAAW,CAACJ,iBAAiB,IAC3B,kBAAC,IAAD,CAAUyC,GAAI,CAAEgK,SAAU,QAG9Bc,GAAoB,WACV/G,EAAQ,IAEhBC,KAAK,UAAY,CAAEE,iBAAiB,IACvCC,MAAK,SAACC,GACLC,QAAQC,IAAIF,MAEbK,OAAM,SAAUC,GACfL,QAAQC,IAAII,OAeHuG,GAXS,SAAA/M,GAAK,OAC3B,kBAAChB,EAAD,MACK,gBAAGS,EAAH,EAAGA,WAAH,OACG,kBAAC,GAAD,iBACQO,EADR,CAEIP,WAAYA,S,4OC1BPuN,G,YACjB,WAAYhN,GAAQ,IAAD,8BACf,4CAAMA,KAQVsF,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAIqN,E,2VAAW,IAAQrN,EAAUqN,aAEjC,OADAA,EAAY1H,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACrC,CAAEmN,mBAdE,EAkBnBC,kBAAoB,SAAC3H,GACjBA,EAAMK,iBACN,IAAMqE,EAAM,EAAK9K,MAAM8N,YACvBhD,EAAIpG,YAAc,KAClBsC,QAAQC,IAAI6D,GACZ,EAAKkD,OAAOlD,GACZ,EAAKtK,SAAS,CAAEsN,YAAa,QAxBd,EA2BnBG,gBAAkB,SAAC7H,GACfA,EAAMK,iBACN,EAAKuH,OAAO,EAAKhO,MAAM8N,cA3BvB,EAAK9N,MAAQ,CACT8N,YAAa,EAAKjN,MAAMiN,YACxB3N,SAAU,EAAKU,MAAMV,UAEzB,EAAK8N,gBAAkB,EAAKA,gBAAgB3G,KAArB,gBANR,E,oEAgCZwG,GACWpH,EAAQ,IAMhB4D,IAAI,eAAgBwD,EALX,CACXlH,QAAS,CACL,eAAgB,qBAGuB,CAAEC,iBAAiB,IAC7DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,yCAETE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,0G,+BAIR,IAAD,OACL,OACI,0BACIQ,IAA+B,MAA1B9G,KAAKZ,MAAM8N,YAAsBlN,KAAKZ,MAAM8N,YAAYnE,IAAM,EACnEtH,UAAW,CACP0D,UAAW,CACP3E,QAAS,OACT4E,SAAU,SAGlBoD,SAAUxI,KAAKqN,iBAEf,kBAACpG,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,eACRuG,QAAS,GAEkB,MAA1BzI,KAAKZ,MAAM8N,YACRrE,GAAa7I,KAAKZ,MAAM8N,YAAalN,KAAKZ,MAAMG,SAAUS,KAAKuF,cAC7D,MAEiB,MAA1BvF,KAAKZ,MAAM8N,YACR,kBAACjG,GAAA,EAAD,CACIH,KAAG,EACH3B,WAAS,EACT+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,SACXM,QAAS,GAET,kBAACE,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,UAQE5B,KAAKZ,MAAMG,SASP,KARF,kBAACoJ,GAAA,EAAD,CACIyB,QAAS,SAACtB,GAAD,OAAO,EAAKqE,kBAAkBrE,IACvCnD,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,cAUN,U,GApGmBzB,a,kDCUnCmN,G,YACF,WAAYrN,GAAQ,IAAD,8BACf,4CAAMA,KAWVsF,aAAe,SAAAgI,GAAK,OAAI,SAAC/H,EAAOgI,GAC5B,EAAK5N,SAAS,CAAE6N,WAAUD,GAAaD,MAbxB,EAgBnBG,eAAiB,SAAClI,GACdA,EAAMK,iBACN,IAAM8H,EAAa,CACf5E,IAAK,KACLjF,YAAa,KACbT,WAAY,EAAKjE,MAAMK,KACvBwF,eAAgB,EAAK7F,MAAMI,WAAWoD,UAAY,IAAM,EAAKxD,MAAMI,WAAWqD,SAC9EmC,SAAUQ,EAAME,OAAO,GAAG3F,MAC1B+E,QAASU,EAAME,OAAO,GAAG3F,OAEf+F,EAAQ,IAMhBC,KAAK,eAAgB4H,EALZ,CACX3H,QAAS,CACL,eAAgB,qBAGuB,CAAEC,iBAAiB,IAC7DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,EAAKvG,UAAS,SAAAC,GAAS,MAAK,CACxByJ,aAAa,GAAD,oBAAMzJ,EAAUyJ,cAAhB,CAA8BqE,QAE9CrH,MAAM,0CAETE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,+EAxCd,EAAKlH,MAAQ,CACTkK,aAAc,KACd/J,SAAU,EAAKU,MAAMV,SACrBE,KAAM,EAAKQ,MAAMR,KACjBD,WAAY,EAAKS,MAAMT,WACvBiO,SAAU,IAEd,EAAKC,eAAiB,EAAKA,eAAehH,KAApB,gBATP,E,iFA8CE,IAAD,OACV2E,EAAQvF,EAAQ,IAClB8H,EAAO,WACP5N,KAAKZ,MAAMG,WACXqO,EAAO,WAEXvC,EAAM7B,IAAI,gBAAkBoE,EAAO5N,KAAKZ,MAAMK,KAAO,IAAK,CAAEwG,iBAAiB,IACxEC,MAAK,SAACC,GACH,EAAKvG,SAAS,CACV0J,aAAcnD,EAASI,UAG9BC,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,2D,yCAICgD,EAAc/J,GAAW,IAAD,OACnCsO,EAAS,CAAC,WAAc,QAC5B,OAAO,kBAAC5G,GAAA,EAAD,CAAM9B,WAAS,EAClB+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,SACXM,QAAS,GACRa,EAAazC,KAAI,SAACqG,GAAD,OACd,kBAACjG,GAAA,EAAD,CAAMH,IAAKoG,EAAYlI,SAAUkC,MAAI,GACjC,kBAACmB,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,GACzB,kBAACuF,GAAA,EAAD,CAAgBL,SAAU,EAAKrO,MAAMqO,WAAaP,EAAYlI,SAAU+C,SAAU,EAAKxC,aAAa2H,EAAYlI,WAC5G,kBAAC+I,GAAA,EAAD,CACIC,WAAY,kBAAC,KAAD,MACZC,gBAAc,mBACdtI,GAAG,mBAEH,kBAACsB,GAAA,EAAD,CAAM9B,WAAS,EAAC+C,UAAU,OACtB,kBAAClG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,UACY8E,EAAYlI,SAASkJ,MAAM,KAAK,GAAK,IAAMhB,EAAYlI,SAASkJ,MAAM,KAAK,IAE3D,MAA3BhB,EAAYpJ,aAAuBvE,EAChC,kBAAC0H,GAAA,EAAD,CAAMC,MAAI,EAACiH,MAAON,GACd,kBAAC,IAAD,CAAM9L,GAAI,iBAAmBmL,EAAYpJ,aACrC,kBAAC6E,GAAA,EAAD,CACIhD,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAHZ,oBASN,OAGd,kBAACwM,GAAA,EAAD,KACI,kBAAC,GAAD,CAAalB,YAAaA,EAAa3N,SAAUA,c,+BAWzE,OACI,kBAAC,IAAM0I,SAAP,KAEI,kBAAChB,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,kBAIJ,kBAACC,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACtBvI,KAAKZ,MAAMkK,aAAetJ,KAAKqO,mBAAmBrO,KAAKZ,MAAMkK,aAActJ,KAAKZ,MAAMG,UAAY,KAClGS,KAAKZ,MAAMG,SACR,kBAAC8I,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,0BAAMC,SAAUxI,KAAK0N,gBACjB,kBAACzG,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,eAGA,kBAACf,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,YACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,YACT,kBAACX,GAAA,EAAD,CACIC,UAAQ,EACR3B,GAAG,OACH6B,MAAM,OACNC,KAAK,iBACLC,OAAO,SACPC,WAAS,EACT/F,QAAQ,SACRoG,KAAK,OACLH,gBAAiB,CACbC,QAAQ,KAGhB,kBAACa,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,YAUV,W,GA1KCzB,aA+LZmO,GAbe,SAAArO,GAAK,OAC/B,kBAAChB,EAAD,MACK,gBAAGM,EAAH,EAAGA,SAAUE,EAAb,EAAaA,KAAMD,EAAnB,EAAmBA,WAAnB,OACG,kBAAC,GAAD,iBACQS,EADR,CAEIV,SAAUA,EACVE,KAAMA,EACND,WAAYA,S,qBCtLtBwB,GAAS,CACXD,WAAY,kBACZI,MAAO,QACPC,eAAgB,QAECmN,G,YACjB,WAAYtO,GAAQ,IAAD,8BACf,4CAAMA,KAQVuO,aAAe,SAAAhJ,GACX,EAAK5F,SAAS,CACV6O,OAAQjJ,EAAME,OAAO3F,SAXV,EAiCnB2O,gBAAkB,SAAAnI,GACd,IAAIoI,EAAWpI,EAAKoI,SACpB,EAAKC,QAAQD,IAnCE,EAsCnBE,aAAe,SAACrJ,EAAOiJ,GAEJ,KAAXA,IACA,EAAK7O,SAAS,CACVkP,QAAS,OAEChJ,EAAQ,IAChB0D,IAAI,4BAA8BiF,EAAQ,CAAExI,iBAAiB,IAC9DC,MAAK,SAACC,GACH,EAAKvG,SAAS,CACVkP,QAAS3I,EAASI,UAGzBC,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,2DArDH,EA2DnByI,YAAc,SAACD,GACX,GAAgB,OAAZA,EACA,OAAQ,kBAACzG,GAAA,EAAD,KACJ,kBAACwB,GAAA,EAAD,CAAOT,aAAW,gBACd,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,6BACA,kBAACA,GAAA,EAAD,CAAW/H,MAAM,SAAjB,iBACA,kBAAC+H,GAAA,EAAD,CAAW/H,MAAM,SAAjB,iBAGR,kBAACgI,GAAA,EAAD,KACK6E,EAAQE,QAAQnI,KAAI,SAAAoI,GAAM,OACvB,kBAAClF,GAAA,EAAD,CAAUjD,IAAKmI,EAAOtM,UAClB,kBAACqH,GAAA,EAAD,CAAWb,UAAU,KAAKgB,MAAM,OAC5B,kBAAC,IAAD,CAAM1I,UAAWT,GAAQe,GAAI,gBAAkBkN,EAAOtM,UACjDsM,EAAOrM,UAAY,IAAMqM,EAAOpM,WAGzC,kBAACmH,GAAA,EAAD,CAAW/H,MAAM,SAASgN,EAAO/J,gBAAgB2B,KAAI,SAAAqC,GAAI,OACpD,kBAAC7G,EAAA,EAAD,CAAUyE,IAAKoC,EAAM5G,QAAM,GACxB,kBAACE,EAAA,EAAD,CAAcC,QAASyG,SAG/B,kBAACc,GAAA,EAAD,CAAW/H,MAAM,SAASgN,EAAOtM,kBAjFzD,EAAKvD,MAAQ,CACT0P,QAAS,KACTL,OAAQ,IAEZ,EAAKC,gBAAkB,EAAKA,gBAAgBhI,KAArB,gBANR,E,qEAeXwI,GAAO,IAAD,OACIpJ,EAAQ,IAChB0D,IAAI,qBAAuB0F,EAAM,CAAEjJ,iBAAiB,IACrDC,MAAK,SAACC,GACH,EAAKvG,SAAS,CACVkP,QAAS3I,EAASI,UAGzBC,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,2D,0CAKdtG,KAAK4O,QAAQ,K,+BA+DP,IAAD,OACL,OACI,kBAAC,IAAM3G,SAAP,KACI,kBAACI,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,kBAACtB,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,qBAGA,kBAACnB,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAACd,GAAA,EAAD,CACI1B,GAAG,iBACH6B,MAAM,mBACNE,OAAO,SACPK,SAAU/H,KAAKwO,eAEnB,kBAAC7F,GAAA,EAAD,CACIyB,QAAS,SAACtB,GAAD,OAAO,EAAK+F,aAAa/F,EAAG,EAAK1J,MAAMqP,SAEhD9I,GAAG,UAHP,YAQgB,OAAvB3F,KAAKZ,MAAM0P,QACR,kBAAC7H,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEVnI,KAAK+O,YAAY/O,KAAKZ,MAAM0P,SAC7B,kBAAC,KAAD,CACIK,cAAe,aACfC,UAAW,gBACXC,WAAY,MACZC,UAAWtP,KAAKZ,MAAM0P,QAAQS,WAC9BC,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAc1P,KAAK0O,gBACnBiB,sBAAuB,mBACvBC,eAAgB,YAChBC,mBAAoB,YACpBC,mBAAoB,aACpBC,cAAe,YACfC,kBAAmB,YACnBC,kBAAmB,YACnBC,sBAAuB,YACvBC,cAAe,YACfC,kBAAmB,YACnBC,gBAAiB,YAIzB,kBAACrO,EAAA,EAAD,CAAYJ,QAAQ,KAAKuH,UAAU,KAAKlH,MAAM,SAASyF,OAAO,UAC1D,kBAAC4E,GAAA,EAAD,CAAkBrK,MAAM,kB,GA7JZ9B,a,ikBCjBnBmQ,G,YACnB,WAAYrQ,GAAQ,IAAD,8BACjB,4CAAMA,KAURsF,aAAe,SAAAC,GACbA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACZ,IAAI0Q,EAAW,MAAQ1Q,EAAU0Q,aAEjC,OADAA,EAAY/K,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACrC,CAAEwQ,mBAhBM,EAoBnBC,SAAW,SAAChL,EAAOxB,EAAQrB,GACzB6C,EAAMK,iBACQC,EAAQ,IAChB0D,IAAI,aAAe7G,EAAW,IAAMqB,EAAQ,CAAEiC,iBAAiB,IAClEC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASsK,MACrB,IAAMC,EAAWvK,EAASH,QAAQwD,IAAI,uBAAuB0E,MAAM,aAAa,GAChF9H,QAAQC,IAAIqK,MAEblK,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACZH,MAAM,wEA/BO,EAmCnBqK,SAAW,SAACnL,GACVA,EAAMK,iBACNO,QAAQC,IAAIb,EAAME,QAClB,IAAMkL,EAAYpL,EAAME,OAAOmL,MAAM,GACrC,EAAKjR,SAAS,CAACkR,MAAOF,KAvCL,EAyCnBG,OAAS,SAACvL,EAAO7C,EAAUqO,EAAQF,GACjCtL,EAAMK,iBACN,IAAMU,EAAO,IAAI2E,SACjB3E,EAAK4E,OAAO,QAAS2F,GACPhL,EAAQ,IAChBC,KAAK,WAAapD,EAAW,IAAMqO,EAAQzK,EAAM,CAAEN,iBAAiB,IACvEC,MAAK,SAACC,GACLG,MAAMH,EAASI,SAEhBC,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACZH,MAAM,yEApDO,EAwDnB2K,gBAAkB,SAACzL,GACjBA,EAAMK,iBACN,IAAMqL,EAAoB,MAAQ,EAAK9R,MAAMmR,YAAnB,CAAgC5N,SAAU,EAAKvD,MAAM0E,cACjEgC,EAAQ,IAMhB4D,IAAI,gBAAiBwH,EALZ,CACblL,QAAS,CACP,eAAgB,qBAGqC,CAAEC,iBAAiB,IACzEC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZG,MAAM,yCAEPE,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACZH,MAAM,yGAtEV,EAAKlH,MAAQ,CACXmR,YAAa,EAAKtQ,MAAMsQ,YACxBzM,YAAa,EAAK7D,MAAMR,KACxBF,SAAU,EAAKU,MAAMV,SACrBuR,MAAO,MAET,EAAKG,gBAAkB,EAAKA,gBAAgBvK,KAArB,gBARN,E,sEA4ET,IAAD,OACP,OACE,0BACEI,IAAK9G,KAAKZ,MAAMmR,YAAYxH,IAC5BtH,UAAW,CACT0D,UAAW,CACT3E,QAAS,OACT4E,SAAU,SAGdoD,SAAUxI,KAAKiR,iBACf,kBAAChK,GAAA,EAAD,CACE9B,WAAS,EACTjD,QAAQ,eAGRiG,WAAW,UAEVU,GAAa7I,KAAKZ,MAAMmR,YAAavQ,KAAKZ,MAAMG,SAAUS,KAAKuF,cAC9B,MAAjCvF,KAAKZ,MAAMmR,YAAYvM,OACtB,kBAACiD,GAAA,EAAD,CAAMC,MAAI,GAER,kBAACyB,GAAA,EAAD,CAAQ/G,QAAQ,YAAYuH,UAAU,QACpC,uBAAGgI,KAAM,kCAAoCnR,KAAKZ,MAAM0E,YAAc,IAAM9D,KAAKZ,MAAMmR,YAAYvM,OAAQoN,IAAI,sBAAsB1L,OAAO,UAA5I,qBAKF1F,KAAKZ,MAAMG,SACX,kBAAC0H,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,2BACEE,UAAQ,EACR+J,OAAO,IACP1L,GAAG,wBACH8B,KAAK,OACLM,SAAU/H,KAAK2Q,WAEjB,2BAAOW,QAAQ,yBACb,kBAAC3I,GAAA,EAAD,CAAQ/G,QAAQ,YAAYuH,UAAU,OAAOiB,QAAS,SAACtB,GAAD,OAAO,EAAKiI,OAAOjI,EAAI,EAAK1J,MAAM0E,YAAY,EAAK1E,MAAMmR,YAAYxH,IAAK,EAAK3J,MAAM0R,SAA3I,6BAKF,MAEP9Q,KAAKZ,MAAMG,SACV,kBAAC0H,GAAA,EAAD,CACEH,KAAG,EACH3B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACQ,GAAA,EAAD,CACElB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJV,WAUF,U,GA5I+BzB,a,mOCenCoR,G,YACF,WAAYtR,GAAQ,IAAD,8BACf,4CAAMA,KAeVuR,kBAAoB,SAAAjE,GAAK,OAAI,SAAC/H,EAAOgI,GACjC,EAAK5N,SAAS,CAAE6N,WAAUD,GAAaD,MAjBxB,EAoBnBhI,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAI6D,E,2VAAY,IAAQ7D,EAAU6D,cAElC,OADAA,EAAa8B,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACtC,CAAE2D,oBAzBE,EAoCnB+N,qBAAuB,SAACjM,GACpBA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GAAS,MAAK,CACxB6R,eAAe,GAAD,oBAAM7R,EAAU6R,gBAAhB,CAAgC,EAAKtS,MAAMuS,iBAvC9C,EA4CnBC,eAAiB,SAACpM,GACdA,EAAMK,iBACN,IAAM8H,EAAa,CACf5E,IAAK,KACLpG,SAAU,EAAKvD,MAAM0E,YACrBH,SAAU6B,EAAME,OAAO,GAAG3F,MAC1B6D,SAAU4B,EAAME,OAAO,GAAG3F,MAC1B8D,WAAY,EAAKzE,MAAMiE,WACvBU,wBAAyB,EAAK3E,MAAMsS,eACpC1N,OAAQ,KACRyJ,SAAU,IAEA3H,EAAQ,IAMhBC,KAAK,gBAAiB4H,EALb,CACX3H,QAAS,CACL,eAAgB,qBAGwB,CAAEC,iBAAiB,IAC9DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,sCACNqH,EAAW5E,IAAM5C,EAASI,KAC1BH,QAAQC,IAAIsH,GACZ,EAAK/N,UAAS,SAAAC,GAAS,MAAK,CACxB6D,aAAa,GAAD,oBAAM7D,EAAU6D,cAAhB,CAA8BiK,WAGjDnH,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,+EAxEd,EAAKlH,MAAQ,CACTsE,aAAc,EAAKzD,MAAMZ,KAAKqE,aAC9BnE,SAAU,EAAKU,MAAMV,SACrB8D,WAAY,EAAKpD,MAAMR,KACvBqE,YAAa,EAAK7D,MAAMZ,KAAKsD,SAC7B+O,eAAgB,GAChBC,UAAW,KACXlE,SAAU,IAEd,EAAKmE,eAAiB,EAAKA,eAAelL,KAApB,gBACtB,EAAK+K,qBAAuB,EAAKA,qBAAqB/K,KAA1B,gBAC5B,EAAKmL,sBAAwB,EAAKA,sBAAsBnL,KAA3B,gBAbd,E,mFA8BGlB,GAClBxF,KAAKJ,SAAS,CACV+R,UAAWnM,EAAME,OAAO3F,U,mCA8CnB2D,EAAcnE,GAAW,IAAD,OACjC,OACI,kBAAC0H,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,SACVhG,QAAQ,aACRiG,WAAW,SACXM,QAAS,GACR/E,EAAamD,KAAI,SAACiL,GAAD,OACd,kBAAC7K,GAAA,EAAD,CAAMH,IAAKgL,EAAKnO,SAAWmO,EAAK/I,IAAK7B,MAAI,GACrC,kBAACmB,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,GACzB,kBAACuF,GAAA,EAAD,CAAgBL,SAAU,EAAKrO,MAAMqO,WAAaqE,EAAKnO,SAASmO,EAAK/I,IAAKhB,SAAU,EAAKyJ,kBAAkBM,EAAKnO,SAASmO,EAAK/I,MAC1H,kBAACgF,GAAA,EAAD,CACIC,WAAY,kBAAC,KAAD,MACZC,gBAAc,mBACdtI,GAAG,mBAEH,kBAAC3D,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,WACa0J,EAAKnO,WAGtB,kBAACyK,GAAA,EAAD,KACI,kBAAC,GAAD,CAAamC,YAAauB,EAAMvS,SAAUA,EAAUE,KAAM,EAAKL,MAAM0E,wB,+BAW3F,IAAD,OAEDI,GADW,IAAI6N,MACCC,cAAc9D,MAAM,KAAK,GAC7C,OACI,kBAAC,IAAMjG,SAAP,KACI,kBAAChB,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,sBAIHpI,KAAKiS,aAAajS,KAAKZ,MAAMsE,aAAc1D,KAAKZ,MAAMG,SAAUS,KAAKZ,MAAM0E,aAC3E9D,KAAKZ,MAAMG,SACR,kBAAC8I,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,0BAAMC,SAAUxI,KAAK4R,gBACjB,kBAAC3K,GAAA,EAAD,CACI9B,WAAS,EAETjD,QAAQ,UAGR,kBAACF,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,eAGA,kBAACf,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,gBACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,aACT,kBAACX,GAAA,EAAD,CACIC,UAAQ,EACR3B,GAAG,OACH6B,MAAM,OACNC,KAAK,OACLG,aAAc1D,EACdwD,OAAO,SACPC,WAAS,EACT/F,QAAQ,SACRoG,KAAK,OACLH,gBAAiB,CACbC,QAAQ,KAGhB,kBAACb,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAAC0B,GAAA,EAAD,CAAOT,aAAW,gBACd,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,+BAGR,kBAACC,GAAA,EAAD,KACI,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAW/H,MAAM,SAASjC,KAAKZ,MAAMsS,eAAe7K,KAAI,SAAAqL,GAAK,OACxD,kBAAC7P,EAAA,EAAD,CAAUyE,IAAKoL,EAAO5P,QAAM,GACzB,kBAACE,EAAA,EAAD,CAAcC,QAASyP,YAM3C,kBAAC7K,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,0BACNE,OAAO,SACP9F,QAAQ,SACRmG,SAAU/H,KAAK6R,sBACf7J,KAAK,aACT,kBAACf,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACyB,GAAA,EAAD,CACIyB,QAAS,SAACtB,GAAD,OAAO,EAAK2I,qBAAqB3I,IAC1CnD,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,oBASR,kBAACqF,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,qBAYd,U,GAvNKzB,aA6NrBgS,GAAwB,SAAAlS,GAAK,OAC/B,kBAAChB,EAAD,MACK,gBAAGQ,EAAH,EAAGA,KAAMJ,EAAT,EAASA,KAAME,EAAf,EAAeA,SAAUG,EAAzB,EAAyBA,WAAzB,OACG,kBAAC,GAAD,iBACQO,EADR,CAEIZ,KAAMA,EACNI,KAAMA,EACNC,WAAYA,EACZH,SAAUA,S,ikBCpPL+Q,G,YACjB,WAAYrQ,GAAQ,IAAD,8BACf,4CAAMA,KASVsF,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAIuS,EAAY,MAAQvS,EAAUuS,cAElC,OADAA,EAAa5M,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACtC,CAAEqS,oBAfE,EAoBnBC,iBAAmB,SAAC7M,GAChBY,QAAQC,IAAIb,GACZA,EAAMK,iBACN,IAAMyM,EAAqB,MAAQ,EAAKlT,MAAMgT,aAAnB,CAAiCzP,SAAU,EAAKvD,MAAM0E,cACnEgC,EAAQ,IAMhB4D,IAAI,gBAAiB4I,EALZ,CACXtM,QAAS,CACL,eAAgB,qBAGkC,CAAEC,iBAAiB,IACxEC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,yCAETE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,yGAnCd,EAAKlH,MAAQ,CACTgT,aAAc,EAAKnS,MAAMmS,aACzBtO,YAAa,EAAK7D,MAAMR,KACxBF,SAAU,EAAKU,MAAMV,UAEzB,EAAK8S,iBAAmB,EAAKA,iBAAiB3L,KAAtB,gBAPT,E,sEA0Cf,OACI,0BACII,IAAK9G,KAAKZ,MAAMgT,aAAarJ,IAC7BtH,UAAW,CACP0D,UAAW,CACP3E,QAAS,OACT4E,SAAU,SAGlBoD,SAAUxI,KAAKqS,kBACf,kBAACpL,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,eAGRiG,WAAW,UAEVU,GAAa7I,KAAKZ,MAAMgT,aAAcpS,KAAKZ,MAAMG,SAAUS,KAAKuF,cAChEvF,KAAKZ,MAAMG,SACR,kBAAC0H,GAAA,EAAD,CACIH,KAAG,EACH3B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,WAUJ,W,GA/EiBzB,a,mOCenCoS,G,YACF,WAAYtS,GAAQ,IAAD,8BACf,4CAAMA,KAgBVuR,kBAAoB,SAAAjE,GAAK,OAAI,SAAC/H,EAAOgI,GACjC,EAAK5N,SAAS,CAAE6N,WAAUD,GAAaD,MAlBxB,EAqBnBhI,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAIsD,E,2VAAa,IAAQtD,EAAUsD,eAEnC,OADAA,EAAcqC,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACvC,CAAEoD,qBA1BE,EAqCnBqP,oBAAsB,SAAChN,GACnBA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GAAS,MAAK,CACxB4S,cAAc,GAAD,oBAAM5S,EAAU4S,eAAhB,CAA+B,EAAKrT,MAAMsT,gBAxC5C,EA6CnBC,gBAAkB,SAACnN,GACfA,EAAMK,iBACN,IAAM8H,EAAa,CACf5E,IAAK,KACLhE,eAAgBS,EAAME,OAAO,GAAG3F,MAChC4C,SAAU,EAAKvD,MAAM0E,YACrBV,OAAQoC,EAAME,OAAO,GAAG3F,MACxBsD,WAAY,EAAKjE,MAAMiE,WACvBC,UAAW,EAAKlE,MAAMkE,UACtBC,cAAeiC,EAAME,OAAO,GAAG3F,MAC/ByD,YAAagC,EAAME,OAAO,GAAG3F,MAC7B0D,UAAW,EAAKrE,MAAMqT,eAE1BrM,QAAQC,IAAIsH,GAEE7H,EAAQ,IAMhBC,KAAK,gBAAiB4H,EALb,CACX3H,QAAS,CACL,eAAgB,qBAGwB,CAAEC,iBAAiB,IAC9DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,sCACN,EAAK1G,UAAS,SAAAC,GAAS,MAAK,CACxBsD,cAAc,GAAD,oBAAMtD,EAAUsD,eAAhB,CAA+BwK,WAGnDnH,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,+EA1Ed,EAAKlH,MAAQ,CACT+D,cAAe,EAAKlD,MAAMZ,KAAK8D,cAC/B5D,SAAU,EAAKU,MAAMV,SACrB8D,WAAY,EAAKpD,MAAMR,KACvB6D,UAAW,EAAKrD,MAAMqD,UACtBQ,YAAa,EAAK7D,MAAMZ,KAAKsD,SAC7B8P,cAAe,GACfC,SAAU,KACVjF,SAAS,IAEb,EAAKkF,gBAAkB,EAAKA,gBAAgBjM,KAArB,gBACvB,EAAK8L,oBAAsB,EAAKA,oBAAoB9L,KAAzB,gBAC3B,EAAKkM,qBAAuB,EAAKA,qBAAqBlM,KAA1B,gBAdb,E,kFA+BElB,GACjBxF,KAAKJ,SAAS,CACV8S,SAAUlN,EAAME,OAAO3F,U,mCA+ClBoD,EAAe5D,GAAW,IAAD,OAClC,OACI,kBAAC0H,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,SACVhG,QAAQ,aACRiG,WAAW,SACXM,QAAS,GACRtF,EAAc0D,KAAI,SAACgM,GAAD,OACf,kBAAC5L,GAAA,EAAD,CAAMH,IAAK+L,EAAK9N,eAAiB8N,EAAKzP,OAAQ8D,MAAI,GAC9C,kBAACmB,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,GACzB,kBAACuF,GAAA,EAAD,CAAgBL,SAAU,EAAKrO,MAAMqO,WAAaoF,EAAKzP,OAASyP,EAAK9J,IAAKhB,SAAU,EAAKyJ,kBAAkBqB,EAAKzP,OAASyP,EAAK9J,MAC1H,kBAACgF,GAAA,EAAD,CACIC,WAAY,kBAAC,KAAD,MACZC,gBAAc,mBACdtI,GAAG,mBAEH,kBAAC3D,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,WACayK,EAAK9N,iBAGtB,kBAACqJ,GAAA,EAAD,KACI,kBAAC,GAAD,CAAcgE,aAAcS,EAAMtT,SAAUA,EAAUE,KAAM,EAAKL,MAAM0E,wB,+BAW7F,IAAD,OAEDI,GADW,IAAI6N,MACCC,cAAc9D,MAAM,KAAK,GAC7C,OACI,kBAAC,IAAMjG,SAAP,KACI,kBAAChB,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,YAIHpI,KAAKiS,aAAajS,KAAKZ,MAAM+D,cAAenD,KAAKZ,MAAMG,SAAUS,KAAKZ,MAAM0E,aAC5E9D,KAAKZ,MAAMG,SACR,kBAAC8I,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,0BAAMC,SAAUxI,KAAK2S,iBACjB,kBAAC1L,GAAA,EAAD,CACI9B,WAAS,EAETjD,QAAQ,UAGR,kBAACF,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,gBAGA,kBAACf,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,wBACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,aACT,kBAACX,GAAA,EAAD,CACIC,UAAQ,EACR3B,GAAG,OACH6B,MAAM,oBACNC,KAAK,OACLC,OAAO,SACPE,aAAc1D,EACdyD,WAAS,EACT/F,QAAQ,SACRoG,KAAK,OACLH,gBAAiB,CACbC,QAAQ,KAGhB,kBAACT,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,gBACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,aACT,kBAACX,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,kBACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,aACT,kBAACf,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAAC0B,GAAA,EAAD,CAAOT,aAAW,oBACd,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,eAGR,kBAACC,GAAA,EAAD,KACI,kBAACF,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAW/H,MAAM,SAASjC,KAAKZ,MAAMqT,cAAc5L,KAAI,SAAAqL,GAAK,OACvD,kBAAC7P,EAAA,EAAD,CAAUyE,IAAKoL,EAAO5P,QAAM,GACzB,kBAACE,EAAA,EAAD,CAAcC,QAASyP,YAM3C,kBAAC7K,GAAA,EAAD,CACIC,UAAQ,EACR3B,GAAG,UACH6B,MAAM,MACNE,OAAO,SACP9F,QAAQ,SACRmG,SAAU/H,KAAK4S,qBACf5K,KAAK,aACT,kBAACf,GAAA,EAAD,CAAMC,MAAI,GACN,kBAACyB,GAAA,EAAD,CACIyB,QAAS,SAACtB,GAAD,OAAO,EAAK0J,oBAAoB1J,IACzCnD,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,eASR,kBAACqF,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,qCAYd,U,GAxOMzB,aA8OtB2S,GAAyB,SAAA7S,GAAK,OAChC,kBAAChB,EAAD,MACK,gBAAGQ,EAAH,EAAGA,KAAMJ,EAAT,EAASA,KAAME,EAAf,EAAeA,SAAUG,EAAzB,EAAyBA,WAAzB,OACG,kBAAC,GAAD,iBACQO,EADR,CAEIZ,KAAMA,EACNI,KAAMA,EACNC,WAAYA,EACZH,SAAUA,S,ikBCrQLwT,G,YACjB,WAAY9S,GAAQ,IAAD,8BACf,4CAAMA,KAQVsF,aAAe,SAAAC,GACVA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAImT,EAAQ,MAAQnT,EAAUmT,UAE9B,OADAA,EAASxN,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MAClC,CAAEiT,gBAdC,EAmBnBC,aAAe,SAACzN,GACZA,EAAMK,iBACN,IAAMqN,EAAiB,MAAO,EAAK9T,MAAM4T,SAAlB,CAA4BrQ,SAAU,EAAK1C,MAAM0C,WAC1DmD,EAAQ,IAMhB4D,IAAI,YAAawJ,EALR,CACXlN,QAAS,CACL,eAAgB,qBAG0B,CAAEC,iBAAiB,IAChEC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,yCAETE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,yGAjCd,EAAKlH,MAAQ,CACT4T,SAAU,EAAK/S,MAAM+S,SACrBzT,SAAU,EAAKU,MAAMV,UAEzB,EAAK0T,aAAe,EAAKA,aAAavM,KAAlB,gBANL,E,sEAwCf,OACI,0BACII,IAAK9G,KAAKZ,MAAM4T,SAASjK,IACzBtH,UAAW,CACP0D,UAAW,CACP3E,QAAS,OACT4E,SAAU,SAGlBoD,SAAUxI,KAAKiT,cACf,kBAAChM,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,eACRuG,QAAS,GAERI,GAAa7I,KAAKZ,MAAM4T,SAAUhT,KAAKZ,MAAMG,SAAUS,KAAKuF,eAEhEvF,KAAKZ,MAAMG,SACR,kBAAC0H,GAAA,EAAD,CACIH,KAAG,EACH3B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,WAUJ,U,GA5EkBzB,aCOhCgT,G,YACF,WAAYlT,GAAQ,IAAD,8BACf,4CAAMA,KAYVuR,kBAAoB,SAAAjE,GAAK,OAAI,SAAC/H,EAAOgI,GACjC,EAAK5N,SAAS,CAAE6N,WAAUD,GAAaD,MAdxB,EAiBnB6F,YAAc,SAAC5N,GACXA,EAAMK,iBACN,IAAM8H,EAAa,CACf5E,IAAK,KACL7E,KAAMsB,EAAME,OAAO,GAAG3F,MACtB4C,SAAU,EAAKvD,MAAM0E,YACrBK,QAASqB,EAAME,OAAO,GAAG3F,MACzBqE,YAAaoB,EAAME,OAAO,GAAG3F,MAC7BsD,WAAY,EAAKjE,MAAMiE,WACvBC,UAAW,EAAKlE,MAAMkE,WAE1B8C,QAAQC,IAAIsH,GAEE7H,EAAQ,IAMhBC,KAAK,YAAa4H,EALT,CACX3H,QAAS,CACL,eAAgB,qBAGoB,CAAEC,iBAAiB,IAC1DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,sCACN,EAAK1G,UAAS,SAAAC,GAAS,MAAK,CACxBoE,UAAU,GAAD,oBAAMpE,EAAUoE,WAAhB,CAA2B0J,WAG3CnH,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,+EA5Cd,EAAKlH,MAAQ,CACT6E,UAAW,EAAKhE,MAAMZ,KAAK4E,UAC3B1E,SAAU,EAAKU,MAAMV,SACrB8D,WAAY,EAAKpD,MAAMR,KACvBqE,YAAa,EAAK7D,MAAMZ,KAAKsD,SAC7BW,UAAW,EAAKrD,MAAMqD,UACtBmK,SAAU,IAEd,EAAK2F,YAAc,EAAKA,YAAY1M,KAAjB,gBAVJ,E,0EAmDNzC,EAAW1E,EAAUoD,GAAW,IAAD,OACxC,OACI,kBAACsE,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,SACVhG,QAAQ,aACRiG,WAAW,SACXM,QAAS,GACRxE,EAAU4C,KAAI,SAACmM,GAAD,OACX,kBAAC/L,GAAA,EAAD,CAAMH,IAAKkM,EAAS9O,KAAO8O,EAASjK,IAAK7B,MAAI,GACzC,kBAACmB,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,GACzB,kBAACuF,GAAA,EAAD,CAAgBL,SAAU,EAAKrO,MAAMqO,WAAauF,EAAS9O,KAAO8O,EAASjK,IAAKhB,SAAU,EAAKyJ,kBAAkBwB,EAAS9O,KAAO8O,EAASjK,MACtI,kBAACgF,GAAA,EAAD,CACIC,WAAY,kBAAC,KAAD,MACZC,gBAAc,mBACdtI,GAAG,mBAEH,kBAAC3D,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,eACiB4K,EAAS9O,OAG9B,kBAACkK,GAAA,EAAD,KACI,kBAAC,GAAD,CAAU4E,SAAUA,EAAUzT,SAAUA,EAAUoD,SAAUA,c,+BAWxF,IACIuB,GADW,IAAI6N,MACCC,cAAc9D,MAAM,KAAK,GAC7C,OACI,kBAAC,IAAMjG,SAAP,KACI,kBAAChB,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,gBAIHpI,KAAKiS,aAAajS,KAAKZ,MAAM6E,UAAWjE,KAAKZ,MAAMG,SAAUS,KAAKZ,MAAM0E,aACxE9D,KAAKZ,MAAMG,SACR,kBAAC8I,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,0BAAMC,SAAUxI,KAAKoT,aACjB,kBAACnM,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,oBAGA,kBAACf,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,UACH6B,MAAM,kBACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,YACT,kBAACX,GAAA,EAAD,CACIC,UAAQ,EACR3B,GAAG,OACH6B,MAAM,OACNC,KAAK,OACLC,OAAO,SACPE,aAAc1D,EACdyD,WAAS,EACT/F,QAAQ,SACRoG,KAAK,OACLH,gBAAiB,CACbC,QAAQ,KAGhB,kBAACT,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,eACH6B,MAAM,cACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,iBACT,kBAACW,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,YAUV,U,GAtJEzB,aA8JlBkT,GAAqB,SAAApT,GAAK,OAC5B,kBAAChB,EAAD,MACK,gBAAGI,EAAH,EAAGA,KAAME,EAAT,EAASA,SAAUE,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,WAAzB,OACG,kBAAC,GAAD,iBACQO,EADR,CAEIZ,KAAMA,EACNI,KAAMA,EACNC,WAAYA,EACZH,SAAUA,S,8BCtGX+T,OApEf,SAAsBrT,GAClB,IACIiE,GADW,IAAI6N,MACCC,cAAc9D,MAAM,KAAK,GAC7C,OACI,kBAAC7F,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACX,0BAAMC,SAAgC,MAAtBvI,EAAMsF,aAAuBtF,EAAMsF,aAAe,MAC9D,kBAAC0B,GAAA,EAAD,CACI9B,WAAS,EAETjD,QAAQ,UAGc,MAArBjC,EAAMuE,aAAuD,MAAhCvE,EAAMuE,YAAYnB,WAChD,kBAACrB,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,eAEI,kBAAC,IAAD,CAAMrG,GAAI,gBAAkB9B,EAAMuE,YAAYnB,YACzC,IAAMpD,EAAMuE,YAAYnB,aAG/B,kBAACrB,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,cAGF,kBAACf,GAAA,EAAD,CACIC,UAAQ,EACR3B,GAAG,OACH4B,UAAWtH,EAAMV,SACjBiI,MAAM,OACNC,KAAK,OACLC,OAAO,SACPE,aAAmC,MAArB3H,EAAMuE,YAAsBvE,EAAMuE,YAAYN,KAAOA,EACnEyD,WAAS,EACT/F,QAAQ,SACRoG,KAAK,OACLH,gBAAiB,CACbC,QAAQ,KAGhB,kBAACT,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACRC,UAAWtH,EAAMV,SACjBqI,aAAmC,MAArB3H,EAAMuE,YAAsBvE,EAAMuE,YAAYA,YAAc,KAC1EmB,GAAG,UACH6B,MAAM,OACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,aACR/H,EAAMV,SACP,kBAAC0H,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,mBASF,S,ukBC1DlC,SAAS2R,GAAStT,GAAQ,IACdC,EAAqCD,EAArCC,SAAUH,EAA2BE,EAA3BF,MAAOyT,EAAoBvT,EAApBuT,MAAUC,EADd,aACwBxT,EADxB,8BAGrB,OACI,kBAAC+B,EAAA,EAAD,eACImH,UAAU,MACVuK,KAAK,WACLC,OAAQ5T,IAAUyT,EAClB7N,GAAE,mCAA8B6N,GAChCI,kBAAA,8BAAwCJ,IACpCC,GAEJ,kBAACI,GAAA,EAAD,CAAKC,EAAG,GAAI5T,I,IAIH6T,G,YACjB,WAAY9T,GAAQ,IAAD,8BACf,4CAAMA,KAcV+T,UAAY,SAACxO,EAAOyO,GAChB,EAAKrU,SAAS,CAAE+O,SAAUsF,KAhBX,EAmBnB1O,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAIqU,EAAS,MAAQrU,EAAUqU,WAE/B,OADAA,EAAU1O,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACnC,CAAEmU,iBAxBE,EA4BnBzC,qBAAuB,SAACjM,EAAO2O,GAC3B3O,EAAMK,iBACNL,EAAMC,UACN,IAAM2O,EAAiB,CACnBlQ,KAAMsB,EAAME,OAAO,GAAG3F,MACtByE,YAAagB,EAAME,OAAO,GAAG3F,MAC7BsD,WAAY,EAAKjE,MAAMiE,YAEvBgR,EAAa,EAAKjV,MAAM8U,UAAUC,GACtCE,EAAU,uBAAOA,GAAP,CAAmBD,IAC7BhO,QAAQC,IAAIgO,GACZ,EAAKzU,UAAS,SAAAC,GAAS,MAAK,CACxBqU,UAAU,MAAKrU,EAAUqU,UAAhB,eAA4BC,EAAUE,QAEnDjO,QAAQC,IAAI,EAAKjH,MAAM8U,YA1CR,EA6CnBI,cAAgB,SAAC9O,GACbA,EAAMK,iBACN,IAAM0O,EAAkB,MAAQ,EAAKnV,MAAM8U,UAAnB,CAA8BvR,SAAU,EAAKvD,MAAM0E,cAC7DgC,EAAQ,IAMhB4D,IAAI,aAAc6K,EALT,CACXvO,QAAS,CACL,eAAgB,qBAG4B,CAAEC,iBAAiB,IAClEC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,yCAETE,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZH,MAAM,yGA3Dd,EAAKlH,MAAQ,CACT8U,UAAW,EAAKjU,MAAMiU,UACtBpQ,YAAa,EAAK7D,MAAMR,KACxBF,SAAU,EAAKU,MAAMV,SACrBoP,SAAU,EACV6F,SAAU,GACV7P,gBAAiB,GACjB8P,gBAAiB,IAErB,EAAKH,cAAgB,EAAKA,cAAc5N,KAAnB,gBACrB,EAAK+K,qBAAuB,EAAKA,qBAAqB/K,KAA1B,gBAZb,E,sEAiET,IAAD,OACDgO,EAAW,IAAI3C,KACnB,OACI,kBAAC9K,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACwM,GAAA,EAAD,CAAQC,SAAS,SAASzT,MAAM,WAC5B,kBAAC0T,GAAA,EAAD,CACI9U,MAAOC,KAAKZ,MAAMuP,SAClB5G,SAAU/H,KAAKgU,UACfc,eAAe,UACfC,UAAU,UACVC,cAAc,OACd5L,aAAW,+BACX6L,UAAQ,GAER,kBAACC,GAAA,EAAD,CAAK1N,MAAM,wBACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,mBACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,mCAGnB,kBAAC+L,GAAD,CAAUxT,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GACxCxT,KAAKZ,MAAM8U,UAAU3P,qBAAqBsC,KAAI,SAACsO,GAAD,OAC3C,kBAAC,GAAD,CAAarO,IAAK4N,EAAS1C,cAAgBmD,EAAKpM,IAAKvE,YAAa2Q,OAEtE,kBAAC,GAAD,CAAa5P,aAAc,SAACC,GAAD,OAAW,EAAKiM,qBAAqBjM,EAAO,yBAAyBjG,SAAUS,KAAKZ,MAAMG,YAEzH,kBAACgU,GAAD,CAAUxT,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GACxCxT,KAAKZ,MAAM8U,UAAUvP,gBAAgBkC,KAAI,SAACsO,GAAD,OACtC,kBAAC,GAAD,CAAarO,IAAK4N,EAAS1C,cAAgBmD,EAAKpM,IAAKvE,YAAa2Q,OAEtE,kBAAC,GAAD,CAAa5P,aAAc,SAACC,GAAD,OAAW,EAAKiM,qBAAqBjM,EAAO,oBAAoBjG,SAAUS,KAAKZ,MAAMG,YAEpH,kBAACgU,GAAD,CAAUxT,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GACxCxT,KAAKZ,MAAM8U,UAAUtP,kCAAkCiC,KAAI,SAACsO,GAAD,OACxD,kBAAC,GAAD,CAAarO,IAAK4N,EAAS1C,cAAgBmD,EAAKpM,IAAKvE,YAAa2Q,OAEtE,kBAAC,GAAD,CAAa5P,aAAc,SAACC,GAAD,OAAW,EAAKiM,qBAAqBjM,EAAO,sCAAsCjG,SAAUS,KAAKZ,MAAMG,YAEtI,kBAAC0H,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAACQ,GAAA,EAAD,CACIyB,QAAS,SAAAtB,GAAC,OAAI,EAAKwL,cAAcxL,IACjCnD,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,yB,GAhHmBzB,a,+NCRvC,SAASoT,GAAStT,GAAQ,IACdC,EAAqCD,EAArCC,SAAUH,EAA2BE,EAA3BF,MAAOyT,EAAoBvT,EAApBuT,MAAUC,EADd,aACwBxT,EADxB,8BAGrB,OACI,kBAAC+B,EAAA,EAAD,eACImH,UAAU,MACVuK,KAAK,WACLC,OAAQ5T,IAAUyT,EAClB7N,GAAE,mCAA8B6N,GAChCI,kBAAA,8BAAwCJ,IACpCC,GAEJ,kBAACI,GAAA,EAAD,CAAKC,EAAG,GAAI5T,I,IAIlBkV,G,YACF,WAAYnV,GAAQ,IAAD,8BACf,4CAAMA,KAgBVuR,kBAAoB,SAAAjE,GAAK,OAAI,SAAC/H,EAAOgI,GACjC,EAAK5N,SAAS,CAAE6N,WAAUD,GAAaD,MAlBxB,EAqBnByG,UAAY,SAACxO,EAAOyO,GAChB,EAAKrU,SAAS,CAAE+O,SAAUsF,KAtBX,EAyBnB1O,aAAe,SAAAC,GACXA,EAAMC,UACN,EAAK7F,UAAS,SAAAC,GACV,IAAIwE,E,2VAAU,IAAQxE,EAAUwE,YAEhC,OADAA,EAAWmB,EAAME,OAAOC,IAAMH,EAAME,OAAO3F,MACpC,CAAEsE,kBA9BE,EAmCnBoN,qBAAuB,SAACjM,EAAO2O,GAC3B3O,EAAMK,iBACNL,EAAMC,UACN,IAAM2O,EAAiB,CACnBlQ,KAAMsB,EAAME,OAAO,GAAG3F,MACtByE,YAAagB,EAAME,OAAO,GAAG3F,MAC7BsD,WAAY,EAAKjE,MAAMiE,YAE3B,EAAKzD,UAAS,SAAAC,GAAS,sBAClBsU,EADkB,uBACHtU,EAAUsU,IADP,CACkBC,SA5C1B,EAiDnBiB,aAAe,SAAC7P,GACZY,QAAQC,IAAIb,GACZA,EAAMK,iBACN,IAAM8H,EAAa,CACf5E,IAAK,KACLpG,SAAU,EAAKvD,MAAM0E,YACrBQ,UAAWkB,EAAME,OAAO,GAAG3F,MAC3BwE,qBAAsB,EAAKnF,MAAMoV,SACjC7P,gBAAiB,EAAKvF,MAAMuF,gBAC5BC,kCAAmC,EAAKxF,MAAMqV,iBAElDrO,QAAQC,IAAIsH,GACE7H,EAAQ,IAMhBC,KAAK,aAAc4H,EALV,CACX3H,QAAS,CACL,eAAgB,qBAGqB,CAAEC,iBAAiB,IAC3DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZG,MAAM,sCACN,EAAK1G,UAAS,SAAAC,GAAS,MAAK,CACxBwE,WAAW,GAAD,oBAAMxE,EAAUwE,YAAhB,CAA4BsJ,WAG7CnH,OAAM,SAAUC,GACbL,QAAQC,IAAII,GACZL,QAAQC,IAAIsH,GACZrH,MAAM,+EA5Ed,EAAKlH,MAAQ,CACTiF,WAAY,EAAKpE,MAAMZ,KAAKgF,WAC5B9E,SAAU,EAAKU,MAAMV,SACrB8D,WAAY,EAAKpD,MAAMR,KACvBqE,YAAa,EAAK7D,MAAMZ,KAAKsD,SAC7B6R,SAAU,GACV7P,gBAAiB,GACjB8P,gBAAiB,GACjB9F,SAAU,EACVlB,SAAS,IAEb,EAAK4H,aAAe,EAAKA,aAAa3O,KAAlB,gBACpB,EAAK+K,qBAAuB,EAAKA,qBAAqB/K,KAA1B,gBAdb,E,0EAkFNrC,EAAY9E,GAAW,IAAD,OAC/B,OACI,kBAAC0H,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,SACVhG,QAAQ,aACRiG,WAAW,SACXM,QAAS,GACRpE,EAAWwC,KAAI,SAACiL,GAAD,OACZ,kBAAC7K,GAAA,EAAD,CAAMH,IAAKgL,EAAKxN,UAAYwN,EAAK/I,IAAK7B,MAAI,GACtC,kBAACmB,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAQ,GACzB,kBAACuF,GAAA,EAAD,CAAgBL,SAAU,EAAKrO,MAAMqO,WAAaqE,EAAKxN,UAAYwN,EAAK/I,IAAKhB,SAAU,EAAKyJ,kBAAkBM,EAAKxN,UAAYwN,EAAK/I,MAChI,kBAACgF,GAAA,EAAD,CACIC,WAAY,kBAAC,KAAD,MACZC,gBAAc,mBACdtI,GAAG,mBAEH,kBAAC3D,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,oBACsB0J,EAAKxN,YAG/B,kBAAC8J,GAAA,EAAD,KACI,kBAAC,GAAD,CAAW8F,UAAWpC,EAAMvS,SAAUA,EAAU8D,WAAY,EAAKjE,MAAMiE,WAAY5D,KAAM,EAAKL,MAAM0E,wB,+BAW1H,IAAD,OACD4Q,EAAW,IAAI3C,KACnB,OACI,kBAAC,IAAM9J,SAAP,KACKjI,KAAKiS,aAAajS,KAAKZ,MAAMiF,WAAYrE,KAAKZ,MAAMG,SAAUS,KAAKZ,MAAM0E,aACzE9D,KAAKZ,MAAMG,SACR,kBAAC8I,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACvB,kBAACtB,GAAA,EAAD,CACI9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,yBAGA,kBAACuM,GAAA,EAAD,CAAQC,SAAS,SAASzT,MAAM,WAC5B,kBAAC0T,GAAA,EAAD,CACI9U,MAAOC,KAAKZ,MAAMuP,SAClB5G,SAAU/H,KAAKgU,UACfc,eAAe,UACfC,UAAU,UACVC,cAAc,OACd5L,aAAW,+BACX6L,UAAQ,GAER,kBAACC,GAAA,EAAD,CAAK1N,MAAM,wBACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,mBACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,mCAGnB,kBAAC,GAAD,CAAUzH,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GACjB,MAAvBxT,KAAKZ,MAAMoV,SAAmBxU,KAAKZ,MAAMoV,SAAS3N,KAAI,SAACsO,GAAD,OACnD,kBAAC,GAAD,CAAarO,IAAK4N,EAAS1C,cAAexN,YAAa2Q,OACvD,KACJ,kBAAC,GAAD,CAAa5P,aAAc,SAACC,GAAD,OAAW,EAAKiM,qBAAqBjM,EAAO,aAAajG,SAAUS,KAAKZ,MAAMG,YAE7G,kBAAC,GAAD,CAAUQ,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GACV,MAA9BxT,KAAKZ,MAAMuF,gBAA0B3E,KAAKZ,MAAMuF,gBAAgBkC,KAAI,SAACsO,GAAD,OACjE,kBAAC,GAAD,CAAarO,IAAK4N,EAAS1C,cAAexN,YAAa2Q,OACvD,KACJ,kBAAC,GAAD,CAAa5P,aAAc,SAACC,GAAD,OAAW,EAAKiM,qBAAqBjM,EAAO,oBAAoBjG,SAAUS,KAAKZ,MAAMG,YAEpH,kBAAC,GAAD,CAAUQ,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GACV,MAA9BxT,KAAKZ,MAAMqV,gBAA0BzU,KAAKZ,MAAMqV,gBAAgB5N,KAAI,SAACsO,GAAD,OACjE,kBAAC,GAAD,CAAarO,IAAK4N,EAAS1C,cAAexN,YAAa2Q,OACvD,KACJ,kBAAC,GAAD,CAAa5P,aAAc,SAACC,GAAD,OAAW,EAAKiM,qBAAqBjM,EAAO,oBAAoBjG,SAAUS,KAAKZ,MAAMG,YAEpH,0BAAMiJ,SAAUxI,KAAKqV,cACjB,kBAACpO,GAAA,EAAD,CACI9B,WAAS,EACTjD,QAAQ,UAER,kBAACmF,GAAA,EAAD,CACIM,WAAS,EACTL,UAAQ,EACR3B,GAAG,MACH6B,MAAM,YACNE,OAAO,SACP9F,QAAQ,SACRoG,KAAK,aACT,kBAACf,GAAA,EAAD,CAAM9B,WAAS,EACX+C,UAAU,MACVhG,QAAQ,SACRiG,WAAW,UACX,kBAACQ,GAAA,EAAD,CACIlB,KAAK,SACL9B,GAAG,SACHxE,MAAM,UACNS,QAAQ,aAJZ,kCAalB,U,GAlMGzB,aAwMnBmV,GAAsB,SAAArV,GAAK,OAC7B,kBAAChB,EAAD,MACK,gBAAGQ,EAAH,EAAGA,KAAMJ,EAAT,EAASA,KAAME,EAAf,EAAeA,SAAUG,EAAzB,EAAyBA,WAAzB,OACG,kBAAC,GAAD,iBACQO,EADR,CAEIZ,KAAMA,EACNI,KAAMA,EACNC,WAAYA,EACZH,SAAUA,SC3OLgW,G,YACjB,WAAYtV,GAAQ,IAAD,8BACf,4CAAMA,KAaVsM,aAAe,WACX,OAAO,EAAKnN,MAAMoW,MAAM5J,OAAS,GAAK,EAAKxM,MAAMgM,SAASQ,OAAS,GAAK,EAAKxM,MAAMqW,aAAe,EAAKrW,MAAMgM,UAf9F,EAkBnB7F,aAAe,SAAAC,GACX,EAAK5F,SAAL,eAAiB4F,EAAME,OAAOC,GAAKH,EAAME,OAAO3F,SAnBjC,EAsBnB6F,aAAe,SAAAJ,GACXA,EAAMK,iBACN,EAAKjG,SAAS,CACV8L,OAAQ,GACRV,UAAU,IAKd,IAAIC,EAAW,CACXuK,MAAO,EAAKpW,MAAMoW,MAClBpK,SAAU,EAAKhM,MAAMgM,UAEXtF,EAAQ,IAMhBC,KAAK,iBAAkBkF,EALd,CACXjF,QAAS,CACL,eAAgB,sBAInBE,MAAK,SAACC,GACH,EAAKvG,SAAS,CACV8L,OAAQ,sCACRV,UAAU,OAGjBxE,OAAM,SAACC,GACJ,EAAK7G,SAAS,CACV8L,OAAQ,wBAA0BjF,EAClCuE,UAAU,IAEd1E,MAAMG,GACNL,QAAQC,IAAII,OApDpB,EAAKrH,MAAQ,CACToW,MAAO,GACPpK,SAAU,GACVqK,WAAY,GACZ/J,OAAQ,GACRV,UAAU,GAEd,EAAKpF,aAAe,EAAKA,aAAac,KAAlB,gBATL,E,sEA2Df,OACI,kBAACwF,GAAA,EAAD,CAAW/C,UAAU,OAAOgD,SAAS,MACjC,kBAACzK,EAAA,EAAD,MACA,0BAAM8G,SAAUxI,KAAK4F,cACjB,kBAAC5D,EAAA,EAAD,CAAYC,MAAM,SAASkH,UAAU,KAAKvH,QAAQ,MAAlD,eAGA,kBAACyF,GAAA,EAAD,CACIzF,QAAQ,WACR8F,OAAO,SACPJ,UAAQ,EACRK,WAAS,EACThC,GAAG,QACH6B,MAAM,SACNQ,KAAK,QACLoE,aAAa,cACbC,WAAS,EACTtE,SAAU/H,KAAKuF,eAEnB,kBAAC8B,GAAA,EAAD,CACIzF,QAAQ,WACR8F,OAAO,SACPJ,UAAQ,EACRK,WAAS,EACTK,KAAK,WACLR,MAAM,aACNC,KAAK,WACL9B,GAAG,WACHyG,aAAa,mBACbrE,SAAU/H,KAAKuF,eAEnB,kBAAC8B,GAAA,EAAD,CACIzF,QAAQ,WACR8F,OAAO,SACPJ,UAAQ,EACRK,WAAS,EACTK,KAAK,aACLR,MAAM,aACNC,KAAK,WACL9B,GAAG,aACHyG,aAAa,4BACbrE,SAAU/H,KAAKuF,eAElBvF,KAAKZ,MAAM4L,SACR,kBAAChJ,EAAA,EAAD,CAAYJ,QAAQ,KAAKuH,UAAU,KAAKlH,MAAM,SAASyF,OAAO,UAC1D,kBAAC4E,GAAA,EAAD,CAAkBrK,MAAM,YAE5B,kBAAC0G,GAAA,EAAD,CACIpB,UAAWvH,KAAKuM,eAChB9E,KAAK,SACLE,WAAS,EACTxG,MAAM,UACNS,QAAQ,aALZ,gBAUR,kBAACI,EAAA,EAAD,CAAYJ,QAAQ,KAAKuH,UAAU,KAAKlH,MAAM,SAASyF,OAAO,UACzD1H,KAAKZ,MAAMsM,a,GAtHMvL,a,UCgBvBuV,GAnBC,WACZ,OACA,kBAACzO,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EACXhC,WAAS,EACT+C,UAAU,MACVC,WAAW,UACX,kBAACwN,GAAA,EAAD,KACI,kBAAC3T,EAAA,EAAD,CACIJ,QAAQ,KACRuH,UAAU,KACVlH,MAAM,SACN2T,WAAS,GAJb,qKCGZ,SAASrC,GAAStT,GAAQ,IAChBC,EAAqCD,EAArCC,SAAUH,EAA2BE,EAA3BF,MAAOyT,EAAoBvT,EAApBuT,MAAUC,EADZ,aACsBxT,EADtB,8BAGvB,OACE,kBAAC+B,EAAA,EAAD,eACEmH,UAAU,MACVuK,KAAK,WACLC,OAAQ5T,IAAUyT,EAClB7N,GAAE,mCAA8B6N,GAChCI,kBAAA,8BAAwCJ,IACpCC,GAEJ,kBAACI,GAAA,EAAD,CAAKC,EAAG,GAAI5T,I,IAIZ2V,G,YACJ,WAAY5V,GAAQ,IAAD,8BACjB,4CAAMA,KAUR+T,UAAY,SAACxO,EAAOyO,GAClB,EAAKrU,SAAS,CAAE+O,SAAUsF,KAV1B,EAAK7U,MAAQ,CACXC,KAAM,KACNgE,WAAY,EAAKpD,MAAMR,KACvBF,SAAU,EAAKU,MAAMV,SACrBoP,SAAU,EACVnP,WAAY,EAAKS,MAAMT,YAPR,E,iFAeE,IAAD,OACJsG,EAAQ,IAChB0D,IAAI,SAAUxJ,KAAKC,MAAMuK,MAAMC,OAAO3G,YAAa,IAAO,CAAEmC,iBAAiB,IAChFC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASI,MACrB,EAAK3G,SAAS,CACZP,KAAM8G,EAASI,UAGlBC,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACZH,MAAM,2D,+BAKV,OACE,kBAAC,IAAM2B,SAAP,KACE,kBAACI,GAAA,EAAD,CAAOC,UAAW,EAAGC,QAAM,GACzB,kBAACtB,GAAA,EAAD,CACE9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACnG,EAAA,EAAD,CAAYJ,QAAQ,KAAKwG,cAAY,GAArC,uBAIkB,MAAnBpI,KAAKZ,MAAMC,KACV,kBAAC4H,GAAA,EAAD,CACE9B,WAAS,EACT+C,UAAU,SACVhG,QAAQ,SACRiG,WAAW,UAEX,kBAACwM,GAAA,EAAD,CAAQC,SAAS,SAASzT,MAAM,WAC9B,kBAAC0T,GAAA,EAAD,CACE9U,MAAOC,KAAKZ,MAAMuP,SAClB5G,SAAU/H,KAAKgU,UACfc,eAAe,UACfC,UAAU,UACVC,cAAc,OACd5L,aAAW,+BACX6L,UAAQ,GAER,kBAACC,GAAA,EAAD,CAAK1N,MAAM,iBACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,gBACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,YACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,YACX,kBAAC0N,GAAA,EAAD,CAAK1N,MAAM,yBAGf,kBAAC,GAAD,CAAUzH,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GAC3C,kBAAC,GAAD,CAAgBnU,KAAMW,KAAKZ,MAAMC,KAAME,SAAUS,KAAKZ,MAAMG,SAAUG,WAAYM,KAAKC,MAAMP,cAE/F,kBAAC,GAAD,CAAUK,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GAC3C,kBAAC,GAAD,CAAWnU,KAAMW,KAAKZ,MAAMC,KAAME,SAAUS,KAAKZ,MAAMG,SAAUG,WAAYM,KAAKC,MAAMP,WAAYD,KAAMO,KAAKZ,MAAMiE,WAAYC,UAAWtD,KAAKZ,MAAMI,WAAW8D,aAEpK,kBAAC,GAAD,CAAUvD,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GAC3C,kBAAC,GAAD,CAAcnU,KAAMW,KAAKZ,MAAMC,KAAME,SAAUS,KAAKZ,MAAMG,SAAUG,WAAYM,KAAKC,MAAMP,WAAYD,KAAMO,KAAKZ,MAAMiE,cAE1H,kBAAC,GAAD,CAAUtD,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GAC3C,kBAAC,GAAD,CAAenU,KAAMW,KAAKZ,MAAMC,KAAME,SAAUS,KAAKZ,MAAMG,SAAUG,WAAYM,KAAKC,MAAMP,WAAYD,KAAMO,KAAKZ,MAAMiE,WAAYC,UAAWtD,KAAKZ,MAAMI,WAAW8D,aAExK,kBAAC,GAAD,CAAUvD,MAAOC,KAAKZ,MAAMuP,SAAU6E,MAAO,GAC3C,kBAAC,GAAD,CAAYnU,KAAMW,KAAKZ,MAAMC,KAAME,SAAUS,KAAKZ,MAAMG,SAAUG,WAAYM,KAAKC,MAAMP,WAAYD,KAAMO,KAAKZ,MAAMiE,eAGxH,W,GArFYlD,aA0GX2V,GAdc,SAAA7V,GAAK,OAChC,kBAAChB,EAAD,MACG,gBAAGS,EAAH,EAAGA,WAAYH,EAAf,EAAeA,SAAUE,EAAzB,EAAyBA,KAAMD,EAA/B,EAA+BA,WAA/B,OACC,kBAAC,GAAD,iBACMS,EADN,CAEEV,SAAUA,EACVE,KAAMA,EACNC,WAAYA,EACZF,WAAYA,SCtGdY,GAAY,CAChBK,OAAQ,CACNC,MAAM,eAAD,OAJW,IAIX,OACLC,WALgB,IAMhBoV,UAAW,GACXhV,WAAY,uBAIViV,G,iLACM,IAAD,OACP,OAEE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC1U,EAAD,MACA,kBAAC2F,GAAA,EAAD,CACE9B,WAAS,EAET+C,UAAU,SACVC,WAAW,SACXjG,QAAQ,SACRiM,MAAO/N,GAAUK,QAEjB,kBAAC,IAAD,KACE,kBAAC,GAAD,CACEwV,OAAK,EACLrI,KAAK,QACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,GAAD,CACE8M,OAAK,EACLrI,KAAK,gBACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,GAAD,CACE8M,OAAK,EACLrI,KAAK,eACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,GAAD,CACE8M,OAAK,EACLrI,KAAK,iBACLzE,UAAWgJ,KAEb,kBAAC,GAAD,CACE8D,OAAK,EACLrI,KAAK,iBACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,GAAD,CACE8M,OAAK,EACLrI,KAAK,cACLzE,UAAWmM,KAEb,kBAAC,GAAD,CACEW,OAAK,EACLrI,KAAK,aACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,GAAD,CACEyE,KAAK,2BACLzE,UAAWmB,KAEb,kBAAC,GAAD,CACE2L,OAAK,EACLrI,KAAK,QACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,GAAD,CACEyE,KAAK,6BACLzE,UAAW0M,KAEb,kBAAC,GAAD,CACEI,OAAK,EACLrI,KAAK,UACLzE,UAAW,kBAAM,kBAAC,GAAD,CAAQ0C,QAAS,EAAK5L,MAAM4L,aAE/C,kBAAC,IAAD,CACEoK,OAAK,EACLrI,KAAK,IACLzE,UAAW,kBAAM,kBAAC,GAAD,SAEnB,kBAAC,IAAD,CACE8M,OAAK,EACLrI,KAAK,SACLjB,OAAQ,kBAAM,kBAAC,GAAD,CAAOd,QAAS,EAAK5L,MAAM4L,aAE3C,kBAAC,IAAD,CACEoK,OAAK,EACLrI,KAAK,YACLzE,UAAW,kBAAM,kBAAC,GAAD,iB,GAlFfhJ,aA6FH2K,eAAYkL,IC7H3BE,IAASvJ,OAAO,kBAAC,IAAD,KAAiB,kBAAC,GAAD,OAA2BwJ,SAASC,eAAe,W","file":"static/js/main.26ec6be2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport const CardContext = React.createContext();\r\n\r\nexport const CardConsumer = CardContext.Consumer\r\n\r\nclass CardProvider extends Component {\r\n  state = {\r\n    card: null,\r\n    isAuthenticated: false,\r\n    isDoctor: false, \r\n    doctorCard:null,\r\n    user: \"\",\r\n    updateCard: updatedCard => this.updateCard(updatedCard)\r\n  }\r\n\r\nupdateCard = updatedCard => {\r\n  this.setState(prevState => ({\r\n    ...prevState,\r\n    ...updatedCard\r\n  }))\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <CardContext.Provider value={this.state}>\r\n      {this.props.children}\r\n    </CardContext.Provider>\r\n  )\r\n}\r\n}\r\nexport default CardProvider","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Link } from 'react-router-dom'\r\nimport NoteAddRoundedIcon from '@material-ui/icons/NoteAddRounded';\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport EventRoundedIcon from '@material-ui/icons/EventRounded';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport AssignmentIndRoundedIcon from '@material-ui/icons/AssignmentIndRounded';\r\nimport FeaturedPlayListIcon from '@material-ui/icons/FeaturedPlayList';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport { CardContext } from './providers/CardProvider';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        background: 'rgb(24, 32, 44)',\r\n        colour: 'rgb(238, 238, 238)'\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n\r\n    colour: {\r\n        background: 'rgb(35, 47, 62)',\r\n        color: \"white\",\r\n        textDecoration: 'none',\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n        color: 'rgb(238, 238, 238)'\r\n    }\r\n}));\r\n\r\n\r\nexport default function PermanentDrawerLeft() {\r\n    const classes = useStyles();\r\n    const { user, isAuthenticated, isDoctor } = useContext(CardContext);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n                anchor=\"left\">\r\n                <Link className={classes.colour} to=\"/\">\r\n                    <div className={classes.toolbar} >\r\n                        <Typography className={classes.toolbar} variant=\"h4\" align=\"center\" justify=\"center\">\r\n                            MedFiles\r\n                        </Typography>\r\n                    </div>\r\n                </Link>\r\n                <Divider />\r\n                {isAuthenticated ?\r\n                    <List>\r\n                        <Link to=\"/home\">\r\n                            <ListItem button className={classes.link}>\r\n                                <ListItemIcon className={classes.link}><DashboardIcon /></ListItemIcon>\r\n                                <ListItemText primary={\"Strona Główna\"} />\r\n                            </ListItem>\r\n                        </Link>\r\n                        <Divider className={classes.colour} />\r\n                        {isDoctor ?\r\n                            <Link to={\"/doctor-card/\" + user}  >\r\n                                <ListItem button className={classes.link}>\r\n                                    <ListItemIcon className={classes.link}><DescriptionRoundedIcon /></ListItemIcon>\r\n                                    <ListItemText primary={\"Karta Lekarza\"} />\r\n                                </ListItem>\r\n                            </Link>                       \r\n                            :\r\n                            <div>\r\n                                <Link to=\"/card\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><AssignmentIndRoundedIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Karta Pacjenta\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Link to=\"/medical-tests\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><AssessmentIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Badania\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Link to=\"/prescriptions\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><NoteAddIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Recepty\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Link to=\"/referrals\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><FeaturedPlayListIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Skierowania\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Link to=\"/treatments\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><DescriptionIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Historia chorób\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                                <Link to=\"/doctor-list\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><NoteAddIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Karty lekarskie\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                            </div>\r\n                        }\r\n                        <Link to=\"/appointments\">\r\n                                    <ListItem button className={classes.link}>\r\n                                        <ListItemIcon className={classes.link}><EventRoundedIcon /></ListItemIcon>\r\n                                        <ListItemText primary={\"Wizyty\"} />\r\n                                    </ListItem>\r\n                                </Link>\r\n                        <Divider className={classes.colour} />\r\n                        <Link to=\"/logout\">\r\n                            <ListItem button className={classes.link}>\r\n                                <ListItemIcon className={classes.link}><ExitToAppRoundedIcon /></ListItemIcon>\r\n                                <ListItemText primary={\"Wyloguj\"} />\r\n                            </ListItem>\r\n                        </Link>\r\n                    </List>\r\n                    :\r\n                    <List>\r\n                        <Link to=\"/login\" >\r\n                            <ListItem button className={classes.link}>\r\n                                <ListItemIcon className={classes.link}><LockOpenIcon /></ListItemIcon>\r\n                                <ListItemText primary={\"Logowanie\"} />\r\n                            </ListItem>\r\n                        </Link>\r\n                        <Link to=\"/register\">\r\n                            <ListItem button className={classes.link}>\r\n                                <ListItemIcon className={classes.link}><NoteAddRoundedIcon /></ListItemIcon>\r\n                                <ListItemText primary={\"Rejestracja\"} />\r\n                            </ListItem>\r\n                        </Link>\r\n                    </List>}\r\n                <Divider />\r\n            </Drawer>\r\n        </div >\r\n    )\r\n}\r\n","const labels = {\r\n    userMail: \"Adres email\",\r\n    firstName: \"Imię\",\r\n    lastName: \"Nazwisko\",\r\n    dateBirth: \"Data urodzenia\",\r\n    sex: \"Płeć\",\r\n    address: \"Adres korespondencyjny\",\r\n    phoneNumber: \"Numer telefonu\",\r\n    insuranceType: \"Typ ubezpieczenia\",\r\n    prescriptions: \"Recepty\",\r\n    dateTo: \"Data ważności\",\r\n    doctorMail: \"Adres email lekarza\",\r\n    numberPWZ: \"Numer prawa wykonywania zawodu\",\r\n    departmentNFZ: \"Departament NFZ\",\r\n    permissions: \"Dodatkowe uprawnienia\",\r\n    medicines: \"Leki\",\r\n    medicalTests: \"Badania\",\r\n    testDate: \"Data badania\",\r\n    testName: \"Nazwa badania\",\r\n    authorMail: \"Adres email laboranta\",\r\n    patientMail:\"Adres pacjenta\",\r\n    parametersWithReference: \"Wyniki z odniesieniem\",\r\n    fileId: \"Dokument badania\",\r\n    referrals:\"Skierowania\",\r\n    date: \"Data\",\r\n    purpose: \"Cel skierowania\",\r\n    recognition: \"Rozpoznanie\",\r\n    treatments: \"Historia chorób\",\r\n    numberICD: \"Numer ICD\",\r\n    symptomsAndDiagnosis: \"Objawy i diagnoza\",\r\n    information: \"Opis\",\r\n    title:\"Tytuł naukowy\",\r\n    prescriptionRefundNumber:\"Numer pieczątki\",\r\n    pharmacotherapy: \"Farmakoterapia\",\r\n    medicalAnalysisAndRecommendations: \"Epikryza\",\r\n    pesel: \"Pesel\",\r\n    comment: \"Komentarz\",\r\n    prescriptionId:\"Numer recepty\",\r\n    dateTime:\"Data\",\r\n    doctorFullName:\"Imię i nazwisko lekarza\",\r\n    specializations:\"Specjalizacje\"\r\n}\r\n\r\nexport default labels;","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../providers/CardProvider'\r\nimport { Button } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport labels from \"../helpers/defaultLabels\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nconst classes = {\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    width: 200,\r\n  },\r\n};\r\nclass PatientDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      card: this.props.card,\r\n      isDoctor: this.props.isDoctor,\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange = event => {\r\n    event.persist()\r\n    this.setState(prevState => {\r\n      var card = { ...prevState.card };\r\n      card[event.target.id] = event.target.value;\r\n      return { card };\r\n    }\r\n    )\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const axios = require('axios');\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n    axios.post('/card', this.state.card, config,  { withCredentials: true })\r\n      .then((response) => {\r\n        this.props.updateCard({\r\n          card: this.state.card\r\n        });\r\n        console.log(response);\r\n        alert(response.data)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n      })\r\n  }\r\n\r\n  prepareFields(card, isDoctor) {\r\n    return (Object.keys(card).map(key => {\r\n      if (!(Array.isArray(card[key]) || key === \"userId\" || key === \"_id\")) {\r\n        if (key === \"dateBirth\") {\r\n          return <Grid key={key} item xs={6} sm={6}><TextField\r\n            key={key}\r\n            required\r\n            disabled={isDoctor}\r\n            id={key}\r\n            label={labels[key]}\r\n            type=\"date\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            variant=\"filled\"\r\n            defaultValue={card[key]}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={this.handleChange}\r\n          />\r\n          </Grid>\r\n        } else if (key === \"address\") {\r\n          return <Grid key={key} item xs={6} sm={6}><TextField\r\n            key={key}\r\n            id={key}\r\n            required\r\n            fullWidth\r\n            disabled={isDoctor}\r\n            name={key}\r\n            label={labels[key]}\r\n            value={card[key]}\r\n            onChange={this.handleChange}\r\n            margin=\"normal\"\r\n            variant=\"filled\"\r\n          />\r\n          </Grid>\r\n        } else {\r\n          return <Grid key={key} item xs={6} sm={6}> <TextField\r\n            required\r\n            fullWidth\r\n            id={key}\r\n            disabled={isDoctor}\r\n            label={labels[key]}\r\n            defaultValue={card[key]}\r\n            onChange={this.handleChange}\r\n            margin=\"normal\"\r\n            variant=\"filled\" />\r\n          </Grid>\r\n        }\r\n      } else {\r\n        return null\r\n      }\r\n    })\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        \r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Dane pacjenta\r\n            </Typography>\r\n          </Grid>\r\n          <Paper elevation={1} square >\r\n          <form className={classes.container} onSubmit={this.handleSubmit}>\r\n            <Grid\r\n              container\r\n              justify=\"center\"\r\n              spacing={2}\r\n            >\r\n              {this.prepareFields(this.state.card, this.state.isDoctor)}\r\n            </Grid>\r\n            {!this.state.isDoctor ? \r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Button\r\n                type=\"submit\"\r\n                id=\"button\"\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >Zapisz\r\n          </Button>\r\n            </Grid>\r\n            : null}\r\n          </form>\r\n        </Paper>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst ConnectedPatientDetails = props => (\r\n  <CardConsumer>\r\n    {({ card, updateCard, isDoctor }) => (\r\n      <PatientDetails\r\n        {...props}\r\n        card={card}\r\n        updateCard={updateCard}\r\n        isDoctor={isDoctor}\r\n      />\r\n    )}\r\n  </CardConsumer>\r\n)\r\n\r\nexport {ConnectedPatientDetails, PatientDetails}","import labels from \"../helpers/defaultLabels\";\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n\r\n\r\nconst objectFields = (card, isDoctor, handleChange) => {\r\n    return (Object.keys(card).map(key => {\r\n        if (key === \"_id\" || key === \"userMail\") {\r\n            return null;\r\n        } else if (key === \"date\" || key === \"dateTo\" || key === \"testDate\") {\r\n            return <Grid key={key} item xs={6} sm={6}>\r\n                <TextField\r\n                    key={key}\r\n                    required\r\n                    disabled={!isDoctor}\r\n                    id={key}\r\n                    label={labels[key]}\r\n                    type=\"date\"\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    variant=\"filled\"\r\n                    defaultValue={card[key]}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={(e) => handleChange(e, card._id)}\r\n                />\r\n            </Grid>\r\n        }\r\n        else if (key === \"dateTime\") {\r\n            return <Grid key={key} item xs={6} sm={6}>\r\n                <TextField\r\n                    key={key}\r\n                    required\r\n                    disabled={!isDoctor}\r\n                    id={key}\r\n                    label={labels[key]}\r\n                    type=\"datetype-local\"\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    variant=\"filled\"\r\n                    defaultValue={card[key]}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={(e) => handleChange(e, card._id)}\r\n                />\r\n            </Grid>\r\n        }\r\n        else if (key === \"fileId\") {\r\n            return null\r\n        }\r\n        else if (key === \"patientMail\") {\r\n            return <Grid key={key} item xs={6} sm={6}>\r\n                <TextField\r\n                    disabled={isDoctor}\r\n                    fullWidth\r\n                    id={key}\r\n                    label={labels[key]}\r\n                    defaultValue={card[key]}\r\n                    onChange={(e) => handleChange(e, card._id)}\r\n                    margin=\"normal\"\r\n                    variant=\"filled\" />\r\n            </Grid>\r\n        }\r\n        else if (key === \"comment\") {\r\n            return <Grid key={key} item xs={6} sm={6}>\r\n                <TextField\r\n                    fullWidth\r\n                    id={key}\r\n                    label={labels[key]}\r\n                    defaultValue={card[key]}\r\n                    onChange={(e) => handleChange(e, card._id)}\r\n                    margin=\"normal\"\r\n                    variant=\"filled\" />\r\n            </Grid>\r\n        }\r\n        else if (key === \"information\") {\r\n            return <Grid key={key} item xs={6} sm={6}>\r\n                <TextField\r\n                    fullWidth\r\n                    multiline\r\n                    row={2}\r\n                    id={key}\r\n                    disabled={!isDoctor}\r\n                    label={labels[key]}\r\n                    defaultValue={card[key]}\r\n                    onChange={(e) => handleChange(e, card._id)}\r\n                    margin=\"normal\"\r\n                    variant=\"filled\" />\r\n            </Grid>\r\n        }\r\n        else if (Array.isArray(card[key])) {\r\n            var spec = card[key].map((item) =>\r\n                <ListItem key={item} button>\r\n                    <ListItemText key={item} primary={item} />\r\n                </ListItem>)\r\n            return <Grid key={key} item xs={6} sm={6}>\r\n                <Grid key={key} item container justify=\"center\" xs={6} sm={6}>\r\n                    <Typography variant=\"h6\" >\r\n                        {labels[key]}\r\n                    </Typography>\r\n                </Grid>\r\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n                    {spec}\r\n                </List>\r\n            </Grid>\r\n        } else {\r\n            return <Grid key={key} item xs={6} sm={6}> <TextField\r\n                required\r\n                fullWidth\r\n                disabled={!isDoctor}\r\n                id={key}\r\n                label={labels[key]}\r\n                defaultValue={card[key]}\r\n                onChange={(e) => handleChange(e, card._id)}\r\n                margin=\"normal\"\r\n                variant=\"filled\" />\r\n            </Grid>\r\n        }\r\n    })\r\n    )\r\n};\r\n\r\nexport default objectFields;","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class MakeAppointment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            doctorMail: this.props.doctorMail,\r\n            patientMail: this.props.patientMail,\r\n            appointments: null,\r\n        };\r\n        this.reserve = this.reserve.bind(this)\r\n    }\r\n  \r\n    componentDidMount(){\r\n        const axios = require('axios');\r\n        axios.get('/appointment/' + this.state.doctorMail , { withCredentials: true })\r\n            .then((response) => {\r\n                this.setState({ appointments: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                alert(error);\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    reserve(choosen, patientMail) {\r\n        if (choosen != null) {\r\n            choosen.patientMail = patientMail\r\n            const axios = require('axios');\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n            axios.put('/appointment', choosen, config, { withCredentials: true })\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    const items = this.state.appointments.filter(item => item._id !== choosen._id);\r\n                    this.setState({ appointments: items });\r\n                    alert(\"Pomyślnie zapisano kartę\")\r\n                    \r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                    alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n                })\r\n        }\r\n    }\r\n\r\n    showAppointmentsTable(appointments, patientMail) {\r\n        return (<Paper >\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Data wizyty</TableCell>\r\n                        <TableCell align=\"right\">Komentarz</TableCell>\r\n                        <TableCell align=\"right\">Rezerwacja</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {appointments.map(app => (\r\n                        <TableRow key={app._id}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                <TextField\r\n                                    type=\"datetype-local\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    disabled\r\n                                    variant=\"filled\"\r\n                                    defaultValue={app.dateTime}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{app.comment}</TableCell>\r\n                            <TableCell align=\"right\"><Button\r\n                                onClick={() => this.reserve(app, patientMail)}\r\n                                // type=\"submit\"\r\n                                id=\"button\"\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                            >Zarezerwuj\r\n                        </Button></TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper >\r\n        )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Paper elevation={1} square >\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                            Terminy wizyt\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        justify=\"space-around\"\r\n                    >\r\n                        {this.state.appointments != null ? this.showAppointmentsTable(this.state.appointments, this.state.patientMail) : null}\r\n                    </Grid>\r\n                </Paper>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../providers/CardProvider'\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport objectFields from '../models/ObjectFields'\r\nimport MakeAppointment from '../models/appointment/MakeAppointment'\r\nclass DoctorCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            doctorCard: this.props.doctorCard,\r\n            isDoctor: this.props.isDoctor\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var doctorCard = { ...prevState.doctorCard };\r\n            doctorCard[event.target.id] = event.target.value;\r\n            return { doctorCard };\r\n        }\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.isDoctor) {\r\n            this.getDoctorCard(this.props.match.params.doctorMail);\r\n        }\r\n    }\r\n\r\n    getDoctorCard(doctorMail) {\r\n        const axios = require('axios');\r\n        axios.get('/doctor-card/' + doctorMail + '/', { withCredentials: true })\r\n            .then((response) => {\r\n                this.setState({ doctorCard: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                alert(error);\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.put('/doctor-card', this.state.doctorCard, config, { withCredentials: true })\r\n            .then((response) => {\r\n                this.props.updateCard({\r\n                    doctorCard: this.state.doctorCard\r\n                });\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Paper elevation={1} square >\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                            Karta lekarza\r\n                        </Typography>\r\n                    </Grid>\r\n                    <form className={{\r\n                        container: {\r\n                            display: 'flex',\r\n                            flexWrap: 'wrap',\r\n                        }\r\n                    }} onSubmit={this.handleSubmit}>\r\n                        {this.state.doctorCard !== null ?\r\n                        <Grid\r\n                            container\r\n                            justify=\"space-around\"\r\n                        >\r\n                            {objectFields(this.state.doctorCard, this.state.isDoctor, this.handleChange)}\r\n                        </Grid>\r\n                        : null}\r\n                        {this.state.isDoctor ? \r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Button\r\n                                type=\"submit\"\r\n                                id=\"button\"\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                            >Zapisz\r\n                            </Button>\r\n                        </Grid>\r\n                        :\r\n                        this.state.doctorCard !== null ? <MakeAppointment doctorMail={this.state.doctorCard.userMail} patientMail={this.props.user} /> : null }\r\n                    </form>\r\n                </Paper>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedDoctorCard = props => (\r\n    <CardConsumer>\r\n        {({ doctorCard, isDoctor, updateCard, user }) => (\r\n            <DoctorCard\r\n                {...props}\r\n                doctorCard={doctorCard}\r\n                updateCard={updateCard}\r\n                isDoctor={isDoctor}\r\n                user={user}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\nexport default ConnectedDoctorCard","import React, { Component } from 'react';\r\nimport { withCookies } from 'react-cookie';\r\nimport { CardConsumer } from './providers/CardProvider'\r\nclass Home extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: this.props.user,\r\n      isAuthenticated: this.props.isAuthenticated,\r\n      isDoctor: this.props.isDoctor\r\n    };\r\n  }\r\n\r\n  getCard() {\r\n    const axios = require('axios');\r\n    axios.get('/card/' + this.state.username + '/', { withCredentials: true })\r\n      .then( (response)  =>{\r\n        console.log(response.data);\r\n        this.props.updateCard({ card: response.data })\r\n      })\r\n      .catch(function (error) {\r\n        alert(error);\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  getDoctorCard() {\r\n    const axios = require('axios');\r\n    axios.get('/doctor-card/' + this.state.username +'/' , { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.props.updateCard({ doctorCard: response.data })\r\n      })\r\n      .catch(function (error) {\r\n        alert(error);\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.isDoctor) {\r\n      if(this.props.doctorCard == null || this.props.doctorCard.doctorMail !== this.state.username){\r\n        this.getDoctorCard()\r\n      }\r\n    } else {\r\n      //if(this.props.card == null){\r\n        this.getCard()\r\n     // }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Witaj {this.state.username}!</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst ConnectedHome = props => (\r\n  <CardConsumer>\r\n    {({ isAuthenticated,updateCard,card, doctorCard , user, isDoctor  }) => (\r\n      <Home\r\n        {...props}\r\n        isAuthenticated={isAuthenticated}\r\n        user={user}\r\n        isDoctor={isDoctor}\r\n        updateCard={updateCard}\r\n        card={card}\r\n        doctorCard={doctorCard}\r\n      />\r\n    )}\r\n  </CardConsumer>\r\n)\r\n\r\nexport default withCookies(ConnectedHome);","import React, { Component } from \"react\";\r\nimport { Button } from '@material-ui/core';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { CardConsumer } from '../providers/CardProvider'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthenticated: this.props.isAuthenticated,\r\n            username: \"\",\r\n            password: \"\",\r\n            isStatus: false,\r\n            status: ''\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.getRole = this.getRole.bind(this);\r\n    }\r\n\r\n    validateForm() {\r\n        return this.state.username.length > 0 && this.state.password.length > 0;\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n\r\n    getRole(username) {\r\n        const axios = require('axios');\r\n        axios.get('/user/role/' + username + '/', { withCredentials: true })\r\n            .then((response) => {\r\n                if (response.data.includes(\"ROLE_USER\")) {\r\n                    var bool = response.data.includes(\"ROLE_DOCTOR\") ? true : false;\r\n                    this.props.updateCard({\r\n                        isDoctor: bool,\r\n                        isAuthenticated: true,\r\n                        user: username\r\n                    });\r\n                    this.setState({\r\n                        isAuthenticated: true\r\n                    });\r\n                }\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { cookies } = this.props;\r\n        let username = localStorage.getItem(\"username\");\r\n        if (cookies.get(\"SESSION\") != null && username != null) {\r\n            this.getRole(username);\r\n        }\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        this.setState({ isStatus: true });\r\n        event.preventDefault();\r\n        var formData = new FormData();\r\n        formData.append('username', this.state.username);\r\n        formData.append('password', this.state.password);\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n\r\n        axios.post('/login', formData, config)\r\n            .then((response) => {\r\n                axios.get('/user/role/' + this.state.username + '/', { withCredentials: true })\r\n                    .then((response) => {\r\n                        var bool = response.data.includes(\"ROLE_DOCTOR\") ? true : false;\r\n                        this.props.updateCard({\r\n                            isDoctor: bool,\r\n                            isAuthenticated: true,\r\n                            user: this.state.username\r\n                        });\r\n                        this.setState({\r\n                            password: '',\r\n                            isAuthenticated: true,\r\n                            isStatus: false\r\n                        });\r\n                        localStorage.setItem(\"username\", this.state.username);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                        this.setState({\r\n                            status: \"Pobranie roli użytkownika nieudane \" + error,\r\n                            isStatus: false\r\n                        });\r\n                        console.log(error);\r\n                    })\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    status: \"Logowanie nieudane \" + error,\r\n                    isStatus: false\r\n                });\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isAuthenticated) {\r\n            return (<Redirect to={{ pathname: '/home', state: { from: this.props.location } }} />);\r\n        } else {\r\n            return (\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <Typography align=\"center\" component=\"h1\" variant=\"h5\">\r\n                            Logowanie\r\n                         </Typography>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Email \"\r\n                            name=\"email\"\r\n                            autoComplete=\"Adres email\"\r\n                            autoFocus\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Hasło\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"Wpisz hasło\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        {this.state.isStatus ?\r\n                            <Typography variant=\"h4\" component=\"h3\" align=\"center\" margin=\"normal\">\r\n                                <CircularProgress align=\"center\" />\r\n                            </Typography> :\r\n                            <Button\r\n                                disabled={!this.validateForm()}\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                            >Zaloguj</Button>\r\n                        }\r\n                    </form>\r\n                    <Typography variant=\"h4\" component=\"h3\" align=\"center\" margin=\"normal\">\r\n                        {this.state.status}\r\n                    </Typography>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst ConnectedLogin = props => (\r\n    <CardConsumer>\r\n        {({ isAuthenticated, updateCard }) => (\r\n            <Login\r\n                {...props}\r\n                isAuthenticated={isAuthenticated}\r\n                updateCard={updateCard}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\n\r\nexport default ConnectedLogin;","import React, { useContext } from 'react';\r\nimport { CardContext } from '../providers/CardProvider';\r\nimport {\r\n    Route,\r\n    Redirect\r\n} from 'react-router-dom'\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n    const { isAuthenticated } = useContext(CardContext);\r\n    return (\r\n   // <CardConsumer>\r\n    //   {({ isAuthenticated }) => (\r\n            <Route {...rest} render={ (props) =>\r\n                isAuthenticated ?\r\n                    <Component {...props} />\r\n                    :\r\n                    <Redirect to='/login'\r\n                     />\r\n            }\r\n            />\r\n    //    )}\r\n  //  </CardConsumer>\r\n    );\r\n}\r\n\r\nexport default ProtectedRoute","import React from \"react\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { CardConsumer } from '../providers/CardProvider'\r\n\r\nconst Logout = (props) => {\r\n    const { cookies } = props;\r\n    invalidateSession();\r\n    cookies.remove(\"SESSION\");\r\n    localStorage.clear();\r\n    props.updateCard({isAuthenticated: false})\r\n    return (<Redirect to={{ pathname: '/'}} />);\r\n  };\r\n\r\n  const invalidateSession = () => {\r\n    const axios = require('axios');\r\n\r\n    axios.post('/logout',  { withCredentials: true })\r\n      .then((response) => {  \r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  const ConnectedLogout = props => (\r\n    <CardConsumer>\r\n        {({ updateCard }) => (\r\n            <Logout\r\n                {...props}\r\n                updateCard={updateCard}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\n  export default ConnectedLogout;\r\n","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport objectFields from '../ObjectFields'\r\nexport default class Appointment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            appointment: this.props.appointment,\r\n            isDoctor: this.props.isDoctor,\r\n        };\r\n        this.saveAppointment = this.saveAppointment.bind(this);\r\n    }\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var appointment = { ...prevState.appointment };\r\n            appointment[event.target.id] = event.target.value;\r\n            return { appointment };\r\n        })\r\n    }\r\n\r\n    deleteReservation = (event) => {\r\n        event.preventDefault();\r\n        const app = this.state.appointment;\r\n        app.patientMail = null;\r\n        console.log(app)\r\n        this.update(app);\r\n        this.setState({ appointment: null })\r\n    }\r\n\r\n    saveAppointment = (event) => {\r\n        event.preventDefault();\r\n        this.update(this.state.appointment);\r\n    }\r\n\r\n    update(appointment) {\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.put('/appointment', appointment, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                key={this.state.appointment != null ? this.state.appointment._id : 1}\r\n                className={{\r\n                    container: {\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                    }\r\n                }}\r\n                onSubmit={this.saveAppointment}>\r\n\r\n                <Grid\r\n                    container\r\n                    justify=\"space-around\"\r\n                    spacing={2}\r\n                >\r\n                    {this.state.appointment != null ?\r\n                        objectFields(this.state.appointment, this.state.isDoctor, this.handleChange)\r\n                        : null}\r\n                </Grid>\r\n                {this.state.appointment != null ?\r\n                    <Grid\r\n                        key\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                        spacing={2}\r\n                    >\r\n                        <Button\r\n                            type=\"submit\"\r\n                            id=\"button\"\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                        >\r\n                            Zapisz\r\n                        </Button>\r\n                        {!this.state.isDoctor ?\r\n                            <Button\r\n                                onClick={(e) => this.deleteReservation(e)}\r\n                                id=\"button\"\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                            >\r\n                                Usuń\r\n                        </Button>\r\n                            : null}\r\n                    </Grid>\r\n                    : null}\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../../providers/CardProvider'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Appointment from './Appointment'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nclass Appointments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            appointments: null,\r\n            isDoctor: this.props.isDoctor,\r\n            user: this.props.user,\r\n            doctorCard: this.props.doctorCard,\r\n            expanded: \"\"\r\n        };\r\n        this.addAppointment = this.addAppointment.bind(this);\r\n    }\r\n\r\n    handleChange = panel => (event, isExpanded) => {\r\n        this.setState({ expanded: isExpanded ? panel : false });\r\n    };\r\n\r\n    addAppointment = (event) => {\r\n        event.preventDefault();\r\n        const newelement = {\r\n            _id: null,\r\n            patientMail: null, //\"\"\r\n            doctorMail: this.state.user,\r\n            doctorFullName: this.state.doctorCard.firstName + \" \" + this.state.doctorCard.lastName,\r\n            dateTime: event.target[1].value,\r\n            comment: event.target[0].value\r\n        }\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.post('/appointment', newelement, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState(prevState => ({\r\n                    appointments: [...prevState.appointments, newelement]\r\n                }))\r\n                alert(\"Pomyślnie dodano termin wizyty\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędne dane\")\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const axios = require('axios');\r\n        var path = 'patient/'\r\n        if (this.state.isDoctor) {\r\n            path = 'doctor/'\r\n        }\r\n        axios.get('/appointment/' + path + this.state.user + \"/\", { withCredentials: true })\r\n            .then((response) => {\r\n                this.setState({\r\n                    appointments: response.data\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały pobrane, spróbuj ponownie\")\r\n            })\r\n    }\r\n\r\n    renderAppointments(appointments, isDoctor) {\r\n        var styles = {\"marginLeft\": \"30px\"};\r\n        return <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}>\r\n            {appointments.map((appointment) =>\r\n                <Grid key={appointment.dateTime} item>\r\n                    <Paper elevation={3} square={false} >\r\n                        <ExpansionPanel expanded={this.state.expanded === appointment.dateTime} onChange={this.handleChange(appointment.dateTime)}>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                                aria-controls=\"panel1bh-content\"\r\n                                id=\"panel1bh-header\"\r\n                            >\r\n                                <Grid container direction=\"row\">\r\n                                    <Typography variant=\"h4\" gutterBottom>\r\n                                        Wizyta {appointment.dateTime.split(\"T\")[0] + \" \" + appointment.dateTime.split(\"T\")[1]}\r\n                                    </Typography>\r\n                                    {appointment.patientMail != null && isDoctor ?\r\n                                        <Grid item style={styles} >\r\n                                            <Link to={\"/patient-card/\" + appointment.patientMail}>\r\n                                                <Button\r\n                                                    id=\"button\"\r\n                                                    color=\"primary\"\r\n                                                    variant=\"contained\"\r\n                                                >\r\n                                                    Karta Pacjenta\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </Grid>\r\n                                        : null}\r\n                                </Grid>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <Appointment appointment={appointment} isDoctor={isDoctor} />\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                    </Paper>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    }\r\n\r\n    render() {\r\n        //this.getAppointments(this.state.isDoctor, this.state.user);\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Typography variant=\"h4\" gutterBottom>\r\n                        Terminy wizyt\r\n                        </Typography>\r\n                </Grid>\r\n                <Paper elevation={1} square >\r\n                    {this.state.appointments ? this.renderAppointments(this.state.appointments, this.state.isDoctor) : null}\r\n                    {this.state.isDoctor ?\r\n                        <Paper elevation={1} square>\r\n                            <form onSubmit={this.addAppointment}>\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"row\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                >\r\n                                    <Typography variant=\"h4\" gutterBottom>\r\n                                        Nowa wizyta\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        required\r\n                                        id='comment'\r\n                                        label=\"Komentarz\"\r\n                                        margin=\"normal\"\r\n                                        variant=\"filled\"\r\n                                        name=\"comment\" />\r\n                                    <TextField\r\n                                        required\r\n                                        id=\"date\"\r\n                                        label=\"Data\"\r\n                                        type=\"datetime-local\"\r\n                                        margin=\"normal\"\r\n                                        fullWidth\r\n                                        variant=\"filled\"\r\n                                        name=\"date\"\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                    />\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        id=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"contained\"\r\n                                    >Dodaj\r\n                                </Button>\r\n                                </Grid>\r\n                            </form>\r\n                        </Paper>\r\n                        : null}\r\n                </Paper>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst ConnectedAppointments = props => (\r\n    <CardConsumer>\r\n        {({ isDoctor, user, doctorCard }) => (\r\n            <Appointments\r\n                {...props}\r\n                isDoctor={isDoctor}\r\n                user={user}\r\n                doctorCard={doctorCard}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\nexport default ConnectedAppointments","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Link } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst colour = {\r\n    background: 'rgb(35, 47, 62)',\r\n    color: \"white\",\r\n    textDecoration: 'none',\r\n}\r\nexport default class DoctorList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            doctors: null,\r\n            search: ''\r\n        };\r\n        this.handlePageClick = this.handlePageClick.bind(this);\r\n    }\r\n\r\n    changeSelect = event => {\r\n        this.setState({\r\n            search: event.target.value\r\n        })\r\n    }\r\n\r\n    getPage(page) {\r\n        const axios = require('axios');\r\n        axios.get('/doctor-card/list/' + page, { withCredentials: true })\r\n            .then((response) => {\r\n                this.setState({\r\n                    doctors: response.data\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały pobrane, spróbuj ponownie\")\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPage(0);\r\n    }\r\n\r\n    handlePageClick = data => {\r\n        let selected = data.selected\r\n        this.getPage(selected);\r\n    }\r\n\r\n    handleSearch = (event, search) => {\r\n        //event.preventDefault()\r\n        if (search !== '') {\r\n            this.setState({\r\n                doctors: null\r\n            })\r\n            const axios = require('axios');\r\n            axios.get('/doctor-card/list/0?text=' + search, { withCredentials: true })\r\n                .then((response) => {\r\n                    this.setState({\r\n                        doctors: response.data\r\n                    })\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                    alert(\"Dane nie zostały pobrane, spróbuj ponownie\")\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    renderTable = (doctors) => {\r\n        if (doctors !== null) {\r\n            return (<Paper >\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Imię i nazwisko</TableCell>\r\n                            <TableCell align=\"right\">Specjalizacje</TableCell>\r\n                            <TableCell align=\"right\">Adres email</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {doctors.content.map(doctor => (\r\n                            <TableRow key={doctor.userMail}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <Link className={colour} to={\"/doctor-card/\" + doctor.userMail}>\r\n                                        {doctor.firstName + \" \" + doctor.lastName}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{doctor.specializations.map(spec =>\r\n                                    (<ListItem key={spec} button>\r\n                                        <ListItemText primary={spec} />\r\n                                    </ListItem>))}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{doctor.userMail}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper >\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Paper elevation={1} square >\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Typography variant=\"h4\" gutterBottom>\r\n                            Kartoteki lekarzy\r\n                        </Typography>\r\n                        <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"standard-basic\"\r\n                                label=\"Wyszukaj lekarza\"\r\n                                margin=\"normal\"\r\n                                onChange={this.changeSelect}\r\n                            />\r\n                            <Button\r\n                                onClick={(e) => this.handleSearch(e, this.state.search)}\r\n                                //onClick={this.handleSearch(this.state.search)}\r\n                                id=\"button\"\r\n                            >Szukaj\r\n                        </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {this.state.doctors !== null ?\r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            {this.renderTable(this.state.doctors)}\r\n                            <ReactPaginate\r\n                                previousLabel={'Poprzednia'}\r\n                                nextLabel={'Następna'}\r\n                                breakLabel={'...'}\r\n                                pageCount={this.state.doctors.totalPages}\r\n                                marginPagesDisplayed={2}\r\n                                pageRangeDisplayed={5}\r\n                                onPageChange={this.handlePageClick}\r\n                                subContainerClassName={'pages pagination'}\r\n                                breakClassName={'page-item'}\r\n                                breakLinkClassName={'page-link'}\r\n                                containerClassName={'pagination'}\r\n                                pageClassName={'page-item'}\r\n                                pageLinkClassName={'page-link'}\r\n                                previousClassName={'page-item'}\r\n                                previousLinkClassName={'page-link'}\r\n                                nextClassName={'page-item'}\r\n                                nextLinkClassName={'page-link'}\r\n                                activeClassName={'active'}\r\n                            />\r\n                        </Grid>\r\n                        :\r\n                        <Typography variant=\"h4\" component=\"h3\" align=\"center\" margin=\"normal\">\r\n                            <CircularProgress align=\"center\" />\r\n                        </Typography>\r\n                    }\r\n                </Paper>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport objectFields from '../ObjectFields'\r\n\r\nexport default class MedicalTest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      medicalTest: this.props.medicalTest,\r\n      patientMail: this.props.user,\r\n      isDoctor: this.props.isDoctor,\r\n      image: null\r\n    };\r\n    this.saveMedicalTest = this.saveMedicalTest.bind(this);\r\n  }\r\n\r\n  handleChange = event => {\r\n    event.persist()\r\n    this.setState(prevState => {\r\n      var medicalTest = { ...prevState.medicalTest };\r\n      medicalTest[event.target.id] = event.target.value;\r\n      return { medicalTest };\r\n    })\r\n  }\r\n\r\n  download = (event, fileId, userMail) => {\r\n    event.preventDefault();\r\n    const axios = require('axios');\r\n    axios.get('/download/' + userMail + \"/\" + fileId, { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response.blob);\r\n        const filename = response.headers.get('Content-Disposition').split('filename=')[1];\r\n        console.log(filename)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"Dane nie zostały pobrane ze względu na błędy\")\r\n      })\r\n  }\r\n\r\n  loadFile = (event) =>{\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n    const imagedata = event.target.files[0];\r\n    this.setState({image: imagedata});\r\n  }\r\n  upload = (event, userMail, testId, image) => {\r\n    event.preventDefault();\r\n    const data = new FormData();\r\n    data.append('image', image);\r\n    const axios = require('axios');\r\n    axios.post('/upload/' + userMail + \"/\" + testId, data, { withCredentials: true })\r\n      .then((response) => {\r\n        alert(response.data)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"Dane nie zostały zapisane ze względu na błędy\")\r\n      })\r\n  }\r\n\r\n  saveMedicalTest = (event) => {\r\n    event.preventDefault();\r\n    const completedMedicalTest = { ...this.state.medicalTest, userMail: this.state.patientMail }\r\n    const axios = require('axios');\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n    axios.put('/medical-test', completedMedicalTest, config, { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response);\r\n        alert(\"Pomyślnie zapisano kartę\")\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        key={this.state.medicalTest._id}\r\n        className={{\r\n          container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n          }\r\n        }}\r\n        onSubmit={this.saveMedicalTest}>\r\n        <Grid\r\n          container\r\n          justify=\"space-around\"\r\n          //spacing={2}\r\n          //direction=\"column\"\r\n          alignItems=\"center\"\r\n        >\r\n          {objectFields(this.state.medicalTest, this.state.isDoctor, this.handleChange)}\r\n          {this.state.medicalTest.fileId != null ? // onClick={(e) => this.download(e, this.state.medicalTest.fileId, this.state.patientMail)}\r\n            <Grid item\r\n            >\r\n              <Button variant=\"contained\" component=\"span\" >\r\n                <a href={\"http://localhost:8080/download/\" + this.state.patientMail + \"/\" + this.state.medicalTest.fileId} rel=\"noopener noreferrer\" target=\"_blank\" >\r\n                  Pobierz badanie \r\n               </a>\r\n              </Button>\r\n            </Grid>\r\n            : this.state.isDoctor ?\r\n              <Grid item xs={6} sm={6}>\r\n                <input\r\n                  required\r\n                  accept=\"*\"\r\n                  id=\"contained-button-file\"\r\n                  type=\"file\"\r\n                  onChange={this.loadFile}\r\n                />\r\n                <label htmlFor=\"contained-button-file\">\r\n                  <Button variant=\"contained\" component=\"span\" onClick={(e) => this.upload(e,  this.state.patientMail,this.state.medicalTest._id, this.state.image)}>\r\n                    Zapisz dokument badania\r\n                  </Button>\r\n                </label>\r\n              </Grid>\r\n              : null}\r\n        </Grid>\r\n        {this.state.isDoctor ?\r\n          <Grid\r\n            key\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              id=\"button\"\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              Zapisz\r\n                        </Button>\r\n          </Grid>\r\n          :\r\n          null}\r\n      </form>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../../providers/CardProvider'\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport MedicalTest from './MedicalTest.jsx'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nclass MedicalTests extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            medicalTests: this.props.card.medicalTests,\r\n            isDoctor: this.props.isDoctor,\r\n            doctorMail: this.props.user,\r\n            patientMail: this.props.card.userMail,\r\n            parametersList: [],\r\n            parameter: null,\r\n            expanded: \"\"\r\n        };\r\n        this.addMedicalTest = this.addMedicalTest.bind(this);\r\n        this.pushToParametersList = this.pushToParametersList.bind(this);\r\n        this.handleParameterChange = this.handleParameterChange.bind(this);\r\n    }\r\n\r\n    handleChangePanel = panel => (event, isExpanded) => {\r\n        this.setState({ expanded: isExpanded ? panel : false });\r\n    };\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var medicalTests = { ...prevState.medicalTests };\r\n            medicalTests[event.target.id] = event.target.value;\r\n            return { medicalTests };\r\n        }\r\n        )\r\n    }\r\n\r\n    handleParameterChange(event) {\r\n        this.setState({\r\n            parameter: event.target.value\r\n        });\r\n    }\r\n\r\n    pushToParametersList = (event) => {\r\n        event.persist()\r\n        this.setState(prevState => ({\r\n            parametersList: [...prevState.parametersList, this.state.parameter]\r\n        }))\r\n    }\r\n\r\n\r\n    addMedicalTest = (event) => {\r\n        event.preventDefault();\r\n        const newelement = {\r\n            _id: null,\r\n            userMail: this.state.patientMail,\r\n            testDate: event.target[1].value,\r\n            testName: event.target[0].value,\r\n            authorMail: this.state.doctorMail,\r\n            parametersWithReference: this.state.parametersList,\r\n            fileId: null,\r\n            expanded: \"\"\r\n        }\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.post('/medical-test', newelement, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n                newelement._id = response.data;\r\n                console.log(newelement);\r\n                this.setState(prevState => ({\r\n                    medicalTests: [...prevState.medicalTests, newelement]\r\n                }))\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędne dane\")\r\n            })\r\n    }\r\n\r\n    prepareForms(medicalTests, isDoctor) {\r\n        return (\r\n            <Grid container\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                spacing={2}>\r\n                {medicalTests.map((test) =>\r\n                    <Grid key={test.testDate + test._id} item>\r\n                        <Paper elevation={3} square={false} >\r\n                            <ExpansionPanel expanded={this.state.expanded === test.testDate+test._id} onChange={this.handleChangePanel(test.testDate+test._id)}>\r\n                                <ExpansionPanelSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                >\r\n                                    <Typography variant=\"h4\" gutterBottom>\r\n                                        Badanie {test.testDate}\r\n                                    </Typography>\r\n                                </ExpansionPanelSummary>\r\n                                <ExpansionPanelDetails>\r\n                                    <MedicalTest medicalTest={test} isDoctor={isDoctor} user={this.state.patientMail} />\r\n                                </ExpansionPanelDetails>\r\n                            </ExpansionPanel>\r\n                        </Paper>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        var tempDate = new Date();\r\n        var date = tempDate.toISOString().split(\"T\")[0];\r\n        return (\r\n            <React.Fragment>\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Typography variant=\"h4\" gutterBottom>\r\n                        Wyniki badań\r\n                    </Typography>\r\n                </Grid>\r\n                {this.prepareForms(this.state.medicalTests, this.state.isDoctor, this.state.patientMail)}\r\n                {this.state.isDoctor ?\r\n                    <Paper elevation={1} square>\r\n                        <form onSubmit={this.addMedicalTest}>\r\n                            <Grid\r\n                                container\r\n                                //direction=\"column\"\r\n                                justify=\"center\"\r\n                            // alignItems=\"center\"\r\n                            >\r\n                                <Typography variant=\"h4\" gutterBottom>\r\n                                    Nowe wyniki\r\n                                </Typography>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='purpose'\r\n                                    label=\"Nazwa badania\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"testName\" />\r\n                                <TextField\r\n                                    required\r\n                                    id=\"date\"\r\n                                    label=\"Data\"\r\n                                    type=\"date\"\r\n                                    defaultValue={date}\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    name=\"date\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                                <Grid container\r\n                                    direction=\"row\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\">\r\n                                    <Table aria-label=\"simple table\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>Wynik z odniesieniem</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"right\">{this.state.parametersList.map(param =>\r\n                                                    (<ListItem key={param} button>\r\n                                                        <ListItemText primary={param} />\r\n                                                    </ListItem>))}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        required\r\n                                        id='purpose'\r\n                                        label=\"Parametr z odniesieniem\"\r\n                                        margin=\"normal\"\r\n                                        variant=\"filled\"\r\n                                        onChange={this.handleParameterChange}\r\n                                        name=\"testName\" />\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            onClick={(e) => this.pushToParametersList(e)}\r\n                                            id=\"button\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                        >Dodaj parametr\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    direction=\"row\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\">\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        id=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Zapisz wyniki\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Paper>\r\n                    : null}\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedMedicalTests = props => (\r\n    <CardConsumer>\r\n        {({ user, card, isDoctor, updateCard }) => (\r\n            <MedicalTests\r\n                {...props}\r\n                card={card}\r\n                user={user}\r\n                updateCard={updateCard}\r\n                isDoctor={isDoctor}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\nexport { ConnectedMedicalTests, MedicalTests }","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport objectFields from '../ObjectFields'\r\n\r\nexport default class MedicalTest extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            prescription: this.props.prescription,\r\n            patientMail: this.props.user,\r\n            isDoctor: this.props.isDoctor,\r\n        };\r\n        this.savePrescription = this.savePrescription.bind(this);\r\n    }\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var prescription = { ...prevState.prescription };\r\n            prescription[event.target.id] = event.target.value;\r\n            return { prescription };\r\n        })\r\n    }\r\n\r\n\r\n    savePrescription = (event) => {\r\n        console.log(event);\r\n        event.preventDefault();\r\n        const completedPrescription = { ...this.state.prescription, userMail: this.state.patientMail }\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.put('/prescription', completedPrescription, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                key={this.state.prescription._id}\r\n                className={{\r\n                    container: {\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                    }\r\n                }}\r\n                onSubmit={this.savePrescription}>\r\n                <Grid\r\n                    container\r\n                    justify=\"space-around\"\r\n                    //spacing={2}\r\n                    //direction=\"column\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    {objectFields(this.state.prescription, this.state.isDoctor, this.handleChange)}\r\n                    {this.state.isDoctor ?\r\n                        <Grid\r\n                            key\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Button\r\n                                type=\"submit\"\r\n                                id=\"button\"\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                            >\r\n                                Zapisz\r\n                        </Button>\r\n                        </Grid>\r\n                        :\r\n                        null}\r\n                </Grid>\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../../providers/CardProvider'\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport Prescription from './Prescription.jsx'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nclass Prescriptions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            prescriptions: this.props.card.prescriptions,\r\n            isDoctor: this.props.isDoctor,\r\n            doctorMail: this.props.user,\r\n            numberPWZ: this.props.numberPWZ,\r\n            patientMail: this.props.card.userMail,\r\n            medicinesList: [],\r\n            medicine: null,\r\n            expanded:\"\"\r\n        };\r\n        this.addPrescription = this.addPrescription.bind(this);\r\n        this.pushToMedicinesList = this.pushToMedicinesList.bind(this);\r\n        this.handleMedicineChange = this.handleMedicineChange.bind(this);\r\n    }\r\n\r\n    handleChangePanel = panel => (event, isExpanded) => {\r\n        this.setState({ expanded: isExpanded ? panel : false });\r\n    };\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var prescriptions = { ...prevState.prescriptions };\r\n            prescriptions[event.target.id] = event.target.value;\r\n            return { prescriptions };\r\n        }\r\n        )\r\n    }\r\n\r\n    handleMedicineChange(event) {\r\n        this.setState({\r\n            medicine: event.target.value\r\n        });\r\n    }\r\n\r\n    pushToMedicinesList = (event) => {\r\n        event.persist()\r\n        this.setState(prevState => ({\r\n            medicinesList: [...prevState.medicinesList, this.state.medicine]\r\n        }))\r\n    }\r\n\r\n\r\n    addPrescription = (event) => {\r\n        event.preventDefault();\r\n        const newelement = {\r\n            _id: null,\r\n            prescriptionId: event.target[2].value,\r\n            userMail: this.state.patientMail,\r\n            dateTo: event.target[1].value,\r\n            doctorMail: this.state.doctorMail,\r\n            numberPWZ: this.state.numberPWZ,\r\n            departmentNFZ: event.target[3].value,\r\n            permissions: event.target[0].value,\r\n            medicines: this.state.medicinesList\r\n        }\r\n        console.log(newelement)\r\n\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.post('/prescription', newelement, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n                this.setState(prevState => ({\r\n                    prescriptions: [...prevState.prescriptions, newelement]\r\n                }))\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędne dane\")\r\n            })\r\n    }\r\n\r\n    prepareForms(prescriptions, isDoctor) {\r\n        return (\r\n            <Grid container\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                spacing={2}>\r\n                {prescriptions.map((prep) =>\r\n                    <Grid key={prep.prescriptionId + prep.dateTo} item>\r\n                        <Paper elevation={3} square={false} >\r\n                            <ExpansionPanel expanded={this.state.expanded === prep.dateTo + prep._id} onChange={this.handleChangePanel(prep.dateTo + prep._id)}>\r\n                                <ExpansionPanelSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                >\r\n                                    <Typography variant=\"h4\" gutterBottom>\r\n                                        Recepta {prep.prescriptionId}\r\n                                    </Typography>\r\n                                </ExpansionPanelSummary>\r\n                                <ExpansionPanelDetails>\r\n                                    <Prescription prescription={prep} isDoctor={isDoctor} user={this.state.patientMail} />\r\n                                </ExpansionPanelDetails>\r\n                            </ExpansionPanel>\r\n                        </Paper>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        var tempDate = new Date();\r\n        var date = tempDate.toISOString().split(\"T\")[0];\r\n        return (\r\n            <React.Fragment>\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Typography variant=\"h4\" gutterBottom>\r\n                        Recepty\r\n                    </Typography>\r\n                </Grid>\r\n                {this.prepareForms(this.state.prescriptions, this.state.isDoctor, this.state.patientMail)}\r\n                {this.state.isDoctor ?\r\n                    <Paper elevation={1} square>\r\n                        <form onSubmit={this.addPrescription}>\r\n                            <Grid\r\n                                container\r\n                                //direction=\"column\"\r\n                                justify=\"center\"\r\n                            // alignItems=\"center\"\r\n                            >\r\n                                <Typography variant=\"h4\" gutterBottom>\r\n                                    Nowa recepta\r\n                                </Typography>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='purpose'\r\n                                    label=\"Dodatkowe uprawnienia\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"testName\" />\r\n                                <TextField\r\n                                    required\r\n                                    id=\"date\"\r\n                                    label=\"Termin realizacji\"\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    defaultValue={date}\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    name=\"date\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='purpose'\r\n                                    label=\"Numer recepty\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"testName\" />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='purpose'\r\n                                    label=\"Departament NFZ\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"testName\" />\r\n                                <Grid container\r\n                                    direction=\"row\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\">\r\n                                    <Table aria-label=\"customized table\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>Leki</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"right\">{this.state.medicinesList.map(param =>\r\n                                                    (<ListItem key={param} button>\r\n                                                        <ListItemText primary={param} />\r\n                                                    </ListItem>))}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                    <TextField\r\n                                        required\r\n                                        id='purpose'\r\n                                        label=\"Lek\"\r\n                                        margin=\"normal\"\r\n                                        variant=\"filled\"\r\n                                        onChange={this.handleMedicineChange}\r\n                                        name=\"testName\" />\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            onClick={(e) => this.pushToMedicinesList(e)}\r\n                                            id=\"button\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                        >Dodaj lek\r\n                                     </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container\r\n                                    direction=\"row\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\">\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        id=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Zapisz nową receptę\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Paper>\r\n                    : null}\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedPrescriptions = props => (\r\n    <CardConsumer>\r\n        {({ user, card, isDoctor, updateCard }) => (\r\n            <Prescriptions\r\n                {...props}\r\n                card={card}\r\n                user={user}\r\n                updateCard={updateCard}\r\n                isDoctor={isDoctor}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\nexport { ConnectedPrescriptions, Prescriptions }","import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport objectFields from '../ObjectFields'\r\n\r\nexport default class Referral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            referral: this.props.referral, //propsy podawane albo z karty albo ze zbiorczej karty edycji lekarza\r\n            isDoctor: this.props.isDoctor,\r\n        };\r\n        this.saveReferral = this.saveReferral.bind(this);\r\n    }\r\n\r\n    handleChange = event => {\r\n         event.persist()\r\n         this.setState(prevState => {\r\n             var referral = { ...prevState.referral };\r\n             referral[event.target.id] = event.target.value;\r\n             return { referral };\r\n         })\r\n        //this.props.handleChangeGlobal(event, this.props.referral._id);\r\n    }\r\n\r\n    saveReferral = (event) =>{\r\n        event.preventDefault();\r\n        const completedReferral = {...this.state.referral, userMail: this.props.userMail}\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.put('/referral', completedReferral, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form \r\n                key={this.state.referral._id}\r\n                className={{\r\n                    container: {\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                    }\r\n                }}\r\n                onSubmit={this.saveReferral}>\r\n                <Grid\r\n                    container\r\n                    justify=\"space-around\"\r\n                    spacing={2}\r\n                >\r\n                    {objectFields(this.state.referral, this.state.isDoctor, this.handleChange)}\r\n                </Grid>\r\n                {this.state.isDoctor ?\r\n                    <Grid\r\n                        key\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Button\r\n                            type=\"submit\"\r\n                            id=\"button\"\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            >\r\n                            Zapisz\r\n                        </Button>\r\n                    </Grid>\r\n                    :\r\n                    null}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../../providers/CardProvider'\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport Referral from './Referral.jsx'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nclass Referrals extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            referrals: this.props.card.referrals,\r\n            isDoctor: this.props.isDoctor,\r\n            doctorMail: this.props.user,\r\n            patientMail: this.props.card.userMail,\r\n            numberPWZ: this.props.numberPWZ,\r\n            expanded: \"\"\r\n        };\r\n        this.addReferral = this.addReferral.bind(this);\r\n    }\r\n\r\n    handleChangePanel = panel => (event, isExpanded) => {\r\n        this.setState({ expanded: isExpanded ? panel : false });\r\n    };\r\n\r\n    addReferral = (event) => {\r\n        event.preventDefault();\r\n        const newelement = {\r\n            _id: null,\r\n            date: event.target[1].value,\r\n            userMail: this.state.patientMail,\r\n            purpose: event.target[0].value,\r\n            recognition: event.target[2].value,\r\n            doctorMail: this.state.doctorMail,\r\n            numberPWZ: this.state.numberPWZ\r\n        }\r\n        console.log(newelement)\r\n\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.post('/referral', newelement, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n                this.setState(prevState => ({\r\n                    referrals: [...prevState.referrals, newelement]\r\n                }))\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędne dane\")\r\n            })\r\n    }\r\n\r\n\r\n    prepareForms(referrals, isDoctor, userMail) {\r\n        return (\r\n            <Grid container\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                spacing={2}>\r\n                {referrals.map((referral) =>\r\n                    <Grid key={referral.date + referral._id} item>\r\n                        <Paper elevation={3} square={false} >\r\n                            <ExpansionPanel expanded={this.state.expanded === referral.date + referral._id} onChange={this.handleChangePanel(referral.date + referral._id)}>\r\n                                <ExpansionPanelSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                >\r\n                                    <Typography variant=\"h4\" gutterBottom>\r\n                                        Skierowanie {referral.date}\r\n                                    </Typography>\r\n                                </ExpansionPanelSummary>\r\n                                <ExpansionPanelDetails>\r\n                                    <Referral referral={referral} isDoctor={isDoctor} userMail={userMail} />\r\n                                </ExpansionPanelDetails>\r\n                            </ExpansionPanel>\r\n                        </Paper>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        var tempDate = new Date();\r\n        var date = tempDate.toISOString().split(\"T\")[0];\r\n        return (\r\n            <React.Fragment>\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Typography variant=\"h4\" gutterBottom>\r\n                        Skierowania\r\n                        </Typography>\r\n                </Grid>\r\n                {this.prepareForms(this.state.referrals, this.state.isDoctor, this.state.patientMail)}\r\n                {this.state.isDoctor ?\r\n                    <Paper elevation={1} square>\r\n                        <form onSubmit={this.addReferral}>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Typography variant=\"h4\" gutterBottom>\r\n                                    Nowe skierowanie\r\n                                    </Typography>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='purpose'\r\n                                    label=\"Cel skierowania\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"purpose\" />\r\n                                <TextField\r\n                                    required\r\n                                    id=\"date\"\r\n                                    label=\"Data\"\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    defaultValue={date}\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    name=\"date\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='reckognition'\r\n                                    label=\"Rozpoznanie\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"reckognition\" />\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    id=\"button\"\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                >Dodaj\r\n                                </Button>\r\n                            </Grid>\r\n                        </form>\r\n                    </Paper>\r\n                    : null}\r\n\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ConnectedReferrals = props => (\r\n    <CardConsumer>\r\n        {({ card, isDoctor, user, updateCard }) => (\r\n            <Referrals\r\n                {...props}\r\n                card={card}\r\n                user={user}\r\n                updateCard={updateCard}\r\n                isDoctor={isDoctor}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\nexport { ConnectedReferrals, Referrals }","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Information (props){\r\n    var tempDate = new Date();\r\n    var date = tempDate.toISOString().split(\"T\")[0];\r\n    return(\r\n        <Paper elevation={1} square>\r\n                        <form onSubmit={props.handleChange != null ? props.handleChange : null}>\r\n                            <Grid\r\n                                container\r\n                                //direction=\"column\"\r\n                                justify=\"center\"\r\n                                //alignItems=\"center\"\r\n                            >\r\n                                {props.information != null && props.information.doctorMail != null ? \r\n                                <Typography variant=\"h4\" gutterBottom>\r\n                                    Autor zapisu \r\n                                    <Link to={\"/doctor-card/\" + props.information.doctorMail}>\r\n                                        {\" \" + props.information.doctorMail}\r\n                                    </Link>\r\n                                </Typography>\r\n                                : <Typography variant=\"h4\" gutterBottom>\r\n                                    Nowy zapis \r\n                                </Typography> }\r\n                                <TextField\r\n                                    required\r\n                                    id=\"date\"\r\n                                    disabled={!props.isDoctor}\r\n                                    label=\"Data\"\r\n                                    type=\"date\"\r\n                                    margin=\"normal\"\r\n                                    defaultValue={props.information != null ? props.information.date : date}\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    name=\"date\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    disabled={!props.isDoctor}\r\n                                    defaultValue={props.information != null ? props.information.information : null}\r\n                                    id='purpose'\r\n                                    label=\"Opis\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    name=\"testName\" /> \r\n                                {props.isDoctor ? \r\n                                <Grid container\r\n                                    direction=\"row\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\">\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        id=\"button\"\r\n                                        color=\"primary\"\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Dodaj do listy\r\n                                    </Button>\r\n                                </Grid>\r\n                                : null}\r\n                            </Grid>\r\n                        </form>\r\n                    </Paper>\r\n    )\r\n}\r\n\r\nexport default Information","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Information from \"./Information.jsx\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box p={3}>{children}</Box>\r\n        </Typography>\r\n    );\r\n}\r\nexport default class Treatment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            treatment: this.props.treatment,\r\n            patientMail: this.props.user,\r\n            isDoctor: this.props.isDoctor,\r\n            selected: 0,\r\n            symptoms: [],\r\n            pharmacotherapy: [],\r\n            medicalAnalysis: [],\r\n        };\r\n        this.saveTreatment = this.saveTreatment.bind(this);\r\n        this.pushToParametersList = this.pushToParametersList.bind(this);\r\n    }\r\n\r\n    handleTab = (event, newValue) => {\r\n        this.setState({ selected: newValue });\r\n    };\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var treatment = { ...prevState.treatment };\r\n            treatment[event.target.id] = event.target.value;\r\n            return { treatment };\r\n        })\r\n    }\r\n\r\n    pushToParametersList = (event, listName) => {\r\n        event.preventDefault();\r\n        event.persist()\r\n        const newInformation = {\r\n            date: event.target[0].value,\r\n            information: event.target[1].value,\r\n            doctorMail: this.state.doctorMail\r\n        }\r\n        var updateList = this.state.treatment[listName];\r\n        updateList = [...updateList, newInformation];\r\n        console.log(updateList)\r\n        this.setState(prevState => ({\r\n            treatment: {...prevState.treatment, [listName]:updateList}\r\n        }))\r\n        console.log(this.state.treatment)\r\n    }\r\n\r\n    saveTreatment = (event) => {\r\n        event.preventDefault();\r\n        const completedTreatment = { ...this.state.treatment, userMail: this.state.patientMail }\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.put('/treatment', completedTreatment, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                alert(\"Dane nie zostały zapisane ze względu na błędny/już istniejący email\")\r\n            })\r\n    }\r\n\r\n    render() {\r\n        var tempDate = new Date();\r\n        return (\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={this.state.selected}\r\n                        onChange={this.handleTab}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        scrollButtons=\"auto\"\r\n                        aria-label=\"scrollable auto tabs example\"\r\n                        centered\r\n                    >\r\n                        <Tab label=\"Symptomy i diagnoza\" />\r\n                        <Tab label=\"Farmakoterapia\" />\r\n                        <Tab label=\"Analiza medyczna i zalecenia\" />\r\n                    </Tabs>\r\n                </AppBar>\r\n                <TabPanel value={this.state.selected} index={0}>\r\n                    {this.state.treatment.symptomsAndDiagnosis.map((info) =>\r\n                        <Information key={tempDate.toISOString() + info._id} information={info} />\r\n                    )}\r\n                    <Information handleChange={(event) => this.pushToParametersList(event, \"symptomsAndDiagnosis\")} isDoctor={this.state.isDoctor} />\r\n                </TabPanel>\r\n                <TabPanel value={this.state.selected} index={1}>\r\n                    {this.state.treatment.pharmacotherapy.map((info) =>\r\n                        <Information key={tempDate.toISOString() + info._id} information={info} />\r\n                    )}\r\n                    <Information handleChange={(event) => this.pushToParametersList(event, \"pharmacotherapy\")} isDoctor={this.state.isDoctor} />\r\n                </TabPanel>\r\n                <TabPanel value={this.state.selected} index={2}>\r\n                    {this.state.treatment.medicalAnalysisAndRecommendations.map((info) =>\r\n                        <Information key={tempDate.toISOString() + info._id} information={info} />\r\n                    )}\r\n                    <Information handleChange={(event) => this.pushToParametersList(event, \"medicalAnalysisAndRecommendations\")} isDoctor={this.state.isDoctor} />\r\n                </TabPanel>\r\n                <Grid container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n                    <Button\r\n                        onClick={e => this.saveTreatment(e)}\r\n                        id=\"button\"\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                    >\r\n                        Zapisz historie\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        ) //TODO: PANELE INFORMATION z dodawaniem pojedynczych obiektów i zapisem do bazy\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { CardConsumer } from '../../providers/CardProvider'\r\nimport { Button } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport Treatment from './Treatment.jsx'\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n//import TabPanel from \"../../card/PatientCard\"\r\nimport Information from \"./Information.jsx\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box p={3}>{children}</Box>\r\n        </Typography>\r\n    );\r\n}\r\nclass Treatments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            treatments: this.props.card.treatments,\r\n            isDoctor: this.props.isDoctor,\r\n            doctorMail: this.props.user,\r\n            patientMail: this.props.card.userMail,\r\n            symptoms: [],\r\n            pharmacotherapy: [],\r\n            medicalAnalysis: [],\r\n            selected: 0,\r\n            expanded:\"\"\r\n        };\r\n        this.addTreatment = this.addTreatment.bind(this);\r\n        this.pushToParametersList = this.pushToParametersList.bind(this);\r\n    }\r\n\r\n    handleChangePanel = panel => (event, isExpanded) => {\r\n        this.setState({ expanded: isExpanded ? panel : false });\r\n    };\r\n\r\n    handleTab = (event, newValue) => {\r\n        this.setState({ selected: newValue });\r\n    };\r\n\r\n    handleChange = event => {\r\n        event.persist()\r\n        this.setState(prevState => {\r\n            var treatments = { ...prevState.treatments };\r\n            treatments[event.target.id] = event.target.value;\r\n            return { treatments };\r\n        }\r\n        )\r\n    }\r\n\r\n    pushToParametersList = (event, listName) => {\r\n        event.preventDefault();\r\n        event.persist()\r\n        const newInformation = {\r\n            date: event.target[0].value,\r\n            information: event.target[1].value,\r\n            doctorMail: this.state.doctorMail\r\n        }\r\n        this.setState(prevState => ({\r\n            [listName]: [...prevState[listName], newInformation]\r\n        }))\r\n    }\r\n\r\n\r\n    addTreatment = (event) => {\r\n        console.log(event)\r\n        event.preventDefault();\r\n        const newelement = {\r\n            _id: null,\r\n            userMail: this.state.patientMail,\r\n            numberICD: event.target[0].value,\r\n            symptomsAndDiagnosis: this.state.symptoms,\r\n            pharmacotherapy: this.state.pharmacotherapy,\r\n            medicalAnalysisAndRecommendations: this.state.medicalAnalysis\r\n        }\r\n        console.log(newelement)\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.post('/treatment', newelement, config, { withCredentials: true })\r\n            .then((response) => {\r\n                console.log(response);\r\n                alert(\"Pomyślnie zapisano kartę\")\r\n                this.setState(prevState => ({\r\n                    treatments: [...prevState.treatments, newelement]\r\n                }))\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                console.log(newelement)\r\n                alert(\"Dane nie zostały zapisane ze względu na błędne dane\")\r\n            })\r\n    }\r\n\r\n    prepareForms(treatments, isDoctor) {\r\n        return (\r\n            <Grid container\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                spacing={2}>\r\n                {treatments.map((test) =>\r\n                    <Grid key={test.numberICD + test._id} item>\r\n                        <Paper elevation={3} square={false} >\r\n                            <ExpansionPanel expanded={this.state.expanded === test.numberICD + test._id} onChange={this.handleChangePanel(test.numberICD + test._id)}>\r\n                                <ExpansionPanelSummary\r\n                                    expandIcon={<ExpandMoreIcon />}\r\n                                    aria-controls=\"panel1bh-content\"\r\n                                    id=\"panel1bh-header\"\r\n                                >\r\n                                    <Typography variant=\"h4\" gutterBottom>\r\n                                        Historia choroby {test.numberICD}\r\n                                    </Typography>\r\n                                </ExpansionPanelSummary>\r\n                                <ExpansionPanelDetails>\r\n                                    <Treatment treatment={test} isDoctor={isDoctor} doctorMail={this.state.doctorMail} user={this.state.patientMail}/>\r\n                                </ExpansionPanelDetails>\r\n                            </ExpansionPanel>\r\n                        </Paper>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        var tempDate = new Date();\r\n        return (\r\n            <React.Fragment>\r\n                {this.prepareForms(this.state.treatments, this.state.isDoctor, this.state.patientMail)}\r\n                {this.state.isDoctor ?\r\n                    <Paper elevation={1} square>\r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Typography variant=\"h4\" gutterBottom>\r\n                                Nowa historia choroby\r\n                            </Typography>\r\n                            <AppBar position=\"static\" color=\"default\">\r\n                                <Tabs\r\n                                    value={this.state.selected}\r\n                                    onChange={this.handleTab}\r\n                                    indicatorColor=\"primary\"\r\n                                    textColor=\"primary\"\r\n                                    scrollButtons=\"auto\"\r\n                                    aria-label=\"scrollable auto tabs example\"\r\n                                    centered\r\n                                >\r\n                                    <Tab label=\"Symptomy i diagnoza\" />\r\n                                    <Tab label=\"Farmakoterapia\" />\r\n                                    <Tab label=\"Analiza medyczna i zalecenia\" />\r\n                                </Tabs>\r\n                            </AppBar>\r\n                            <TabPanel value={this.state.selected} index={0}>\r\n                                {this.state.symptoms != null ? this.state.symptoms.map((info) =>\r\n                                    <Information key={tempDate.toISOString()} information={info} />\r\n                                ) : null}\r\n                                <Information handleChange={(event) => this.pushToParametersList(event, \"symptoms\")} isDoctor={this.state.isDoctor} />\r\n                            </TabPanel>\r\n                            <TabPanel value={this.state.selected} index={1}>\r\n                                {this.state.pharmacotherapy != null ? this.state.pharmacotherapy.map((info) =>\r\n                                    <Information key={tempDate.toISOString()} information={info} />\r\n                                ) : null}\r\n                                <Information handleChange={(event) => this.pushToParametersList(event, \"pharmacotherapy\")} isDoctor={this.state.isDoctor} />\r\n                            </TabPanel>\r\n                            <TabPanel value={this.state.selected} index={2}>\r\n                                {this.state.medicalAnalysis != null ? this.state.medicalAnalysis.map((info) =>\r\n                                    <Information key={tempDate.toISOString()} information={info} />\r\n                                ) : null}\r\n                                <Information handleChange={(event) => this.pushToParametersList(event, \"medicalAnalysis\")} isDoctor={this.state.isDoctor} />\r\n                            </TabPanel>\r\n                            <form onSubmit={this.addTreatment}>\r\n                                <Grid\r\n                                    container\r\n                                    justify=\"center\"\r\n                                >\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        required\r\n                                        id='icd'\r\n                                        label=\"Numer ICD\"\r\n                                        margin=\"normal\"\r\n                                        variant=\"filled\"\r\n                                        name=\"testName\" />\r\n                                    <Grid container\r\n                                        direction=\"row\"\r\n                                        justify=\"center\"\r\n                                        alignItems=\"center\">\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            id=\"button\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Zapisz nową historie\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </form>\r\n                        </Grid>\r\n                    </Paper>\r\n                    : null}\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedTreatments = props => (\r\n    <CardConsumer>\r\n        {({ user, card, isDoctor, updateCard }) => (\r\n            <Treatments\r\n                {...props}\r\n                card={card}\r\n                user={user}\r\n                updateCard={updateCard}\r\n                isDoctor={isDoctor}\r\n            />\r\n        )}\r\n    </CardConsumer>\r\n)\r\n\r\nexport { ConnectedTreatments, Treatments }","import React, { Component } from \"react\";\r\nimport { Button } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default class Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            repassword: '',\r\n            status: '',\r\n            isStatus: false\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        //this.handleChange = this.handleChange.bind(this);\r\n        //this.validateForm = this.validateForm.bind(this);\r\n    }\r\n\r\n    validateForm = () => {\r\n        return this.state.email.length > 0 && this.state.password.length > 0 && this.state.repassword === this.state.password;\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.id]: event.target.value });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            status: \"\",\r\n            isStatus: true\r\n        });\r\n        //var formData = new FormData();\r\n        //formData.append('email', this.state.email);\r\n        //formData.append('password', this.state.password);\r\n        var formData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        }\r\n        const axios = require('axios');\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        axios.post('/user/register', formData, config)\r\n            .then((response) => {\r\n                this.setState({\r\n                    status: \"Pomyślnie dokonano rejestracji\",\r\n                    isStatus: false\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    status: \"Rejestracja nieudana \" + error,\r\n                    isStatus: false\r\n                });\r\n                alert(error);\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <Typography align=\"center\" component=\"h1\" variant=\"h5\">\r\n                        Rejestracja\r\n                 </Typography>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email \"\r\n                        name=\"email\"\r\n                        autoComplete=\"Adres email\"\r\n                        autoFocus\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Hasło\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"Wpisz hasło\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"repassword\"\r\n                        label=\"Hasło\"\r\n                        type=\"password\"\r\n                        id=\"repassword\"\r\n                        autoComplete=\"Wpisz hasło ponownie\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    {this.state.isStatus ?\r\n                        <Typography variant=\"h4\" component=\"h3\" align=\"center\" margin=\"normal\">\r\n                            <CircularProgress align=\"center\" />\r\n                        </Typography> :\r\n                        <Button\r\n                            disabled={!this.validateForm()}\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            color=\"primary\"\r\n                            variant=\"contained\">\r\n                            Zarejestruj\r\n                        </Button>\r\n                    }\r\n                </form>\r\n                <Typography variant=\"h4\" component=\"h3\" align=\"center\" margin=\"normal\">\r\n                    {this.state.status}\r\n                </Typography>\r\n            </Container>\r\n        )\r\n    }\r\n}","import Grid from '@material-ui/core/Grid';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nconst Welcome = () => {\r\n    return (\r\n    <Grid item xs={6}\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\">\r\n        <Card>\r\n            <Typography\r\n                variant=\"h6\"\r\n                component=\"h4\"\r\n                align=\"center\"\r\n                paragraph>\r\n                Witaj na stronie do zarządzania kartotekami medycznymi, możesz tu dokonać przeglądu swojej karty lub umówić wizytę u lekarza.\r\n            </Typography>\r\n        </Card>\r\n    </Grid>\r\n    )\r\n};\r\n\r\nexport default Welcome;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport { CardConsumer } from '../providers/CardProvider'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Paper } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { Referrals } from \"../models/referral/Referrals\"\r\nimport { MedicalTests } from \"../models/medical-test/MedicalTests\"\r\nimport { Prescriptions } from \"../models/prescription/Prescriptions\"\r\nimport { Treatments } from \"../models/treatment/Treatments\"\r\nimport { PatientDetails } from \"./PatientDetails\"\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      <Box p={3}>{children}</Box>\r\n    </Typography>\r\n  );\r\n}\r\nclass PatientCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      card: null,\r\n      doctorMail: this.props.user,\r\n      isDoctor: this.props.isDoctor,\r\n      selected: 0,\r\n      doctorCard: this.props.doctorCard\r\n    };\r\n  }\r\n\r\n  handleTab = (event, newValue) => {\r\n    this.setState({ selected: newValue });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const axios = require('axios');\r\n    axios.get('/card/' +this.props.match.params.patientMail, + \"/\", { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response.data)\r\n        this.setState({\r\n          card: response.data\r\n        })\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"Dane nie zostały pobrane, spróbuj ponownie\")\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Paper elevation={1} square >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Kartoteka pacjenta\r\n            </Typography>\r\n          </Grid>\r\n          {this.state.card != null ?\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                  value={this.state.selected}\r\n                  onChange={this.handleTab}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  scrollButtons=\"auto\"\r\n                  aria-label=\"scrollable auto tabs example\"\r\n                  centered\r\n                >\r\n                  <Tab label=\"Dane osobowe\" />\r\n                  <Tab label=\"Skierowania\" />\r\n                  <Tab label=\"Badania\" />\r\n                  <Tab label=\"Recepty\" />\r\n                  <Tab label=\"Historia chorób\" />\r\n                </Tabs>\r\n              </AppBar>\r\n              <TabPanel value={this.state.selected} index={0}>\r\n                <PatientDetails card={this.state.card} isDoctor={this.state.isDoctor} updateCard={this.props.updateCard} />\r\n              </TabPanel>\r\n              <TabPanel value={this.state.selected} index={1}>\r\n                <Referrals card={this.state.card} isDoctor={this.state.isDoctor} updateCard={this.props.updateCard} user={this.state.doctorMail} numberPWZ={this.state.doctorCard.numberPWZ} />\r\n              </TabPanel>\r\n              <TabPanel value={this.state.selected} index={2}>\r\n                <MedicalTests card={this.state.card} isDoctor={this.state.isDoctor} updateCard={this.props.updateCard} user={this.state.doctorMail} />\r\n              </TabPanel>\r\n              <TabPanel value={this.state.selected} index={3}>\r\n                <Prescriptions card={this.state.card} isDoctor={this.state.isDoctor} updateCard={this.props.updateCard} user={this.state.doctorMail} numberPWZ={this.state.doctorCard.numberPWZ}/>\r\n              </TabPanel>\r\n              <TabPanel value={this.state.selected} index={4}>\r\n                <Treatments card={this.state.card} isDoctor={this.state.isDoctor} updateCard={this.props.updateCard} user={this.state.doctorMail} />\r\n              </TabPanel>\r\n            </Grid>\r\n            : null}\r\n        </Paper>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst ConnectedPatientCard = props => (\r\n  <CardConsumer>\r\n    {({ updateCard, isDoctor, user, doctorCard }) => (\r\n      <PatientCard\r\n        {...props}\r\n        isDoctor={isDoctor}\r\n        user={user}\r\n        updateCard={updateCard}\r\n        doctorCard={doctorCard}\r\n      />\r\n    )}\r\n  </CardConsumer>\r\n)\r\n\r\nexport default ConnectedPatientCard","import React, { Component } from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { withCookies } from 'react-cookie';\r\nimport './styles/App.css';\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom'\r\nimport PermanentDrawerLeft from './components/NavBar';\r\nimport {ConnectedPatientDetails} from './components/card/PatientDetails';\r\nimport DoctorCard from './components/card/DoctorCard';\r\nimport CardProvider from './components/providers/CardProvider';\r\nimport Home from './components/Home';\r\nimport Login from './components/helpers/Login';\r\nimport ProtectedRoute from './components/helpers/ProtectedRoute';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Logout from './components/helpers/Logout';\r\nimport Appointments from './components/models/appointment/Appointments';\r\nimport DoctorList from './components/models/DoctorList'\r\nimport {ConnectedMedicalTests} from './components/models/medical-test/MedicalTests';\r\nimport {ConnectedPrescriptions} from './components/models/prescription/Prescriptions';\r\nimport {ConnectedReferrals} from './components/models/referral/Referrals.jsx';\r\nimport {ConnectedTreatments} from './components/models/treatment/Treatments.jsx';\r\nimport Register from './components/helpers/Register';\r\nimport Welcome from './components/helpers/Welcome';\r\nimport PatientCard from './components/card/PatientCard';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = {\r\n  appBar: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    marginTop: 25,\r\n    background: 'rgb(249, 249, 252)'\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      //<CookiesProvider>\r\n      <CardProvider>\r\n        <BrowserRouter>\r\n          <PermanentDrawerLeft />\r\n          <Grid\r\n            container\r\n            //spacing={2}\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            style={useStyles.appBar}\r\n          >\r\n            <Switch>\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/home\"\r\n                component={() => <Home />}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/appointments\"\r\n                component={() => <Appointments />}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/doctor-list\"\r\n                component={() => <DoctorList />}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/medical-tests\"\r\n                component={ConnectedMedicalTests}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/prescriptions\"\r\n                component={() => <ConnectedPrescriptions/>}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/treatments\"\r\n                component={ConnectedTreatments}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/referrals\"\r\n                component={() => <ConnectedReferrals />}\r\n              />\r\n              <ProtectedRoute\r\n                path=\"/doctor-card/:doctorMail\"  //wyszukiwanie doktora przez pacjentów :props.match.params.doctorMail\r\n                component={DoctorCard}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/card\"\r\n                component={() => <ConnectedPatientDetails />}\r\n              />\r\n              <ProtectedRoute\r\n                path=\"/patient-card/:patientMail\"        //:patientMail  -> props.match.params.patientMail        // Sprawdzić czy potrzebne\r\n                component={PatientCard}\r\n              />\r\n              <ProtectedRoute\r\n                exact\r\n                path=\"/logout\"\r\n                component={() => <Logout cookies={this.props.cookies}/>}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/\"\r\n                component={() => <Welcome/>} \r\n                />\r\n              <Route\r\n                exact\r\n                path=\"/login\"\r\n                render={() => <Login cookies={this.props.cookies} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/register\"\r\n                component={() => <Register />}\r\n              />\r\n            </Switch>\r\n          </Grid>\r\n        </BrowserRouter>\r\n      </CardProvider>\r\n      // </CookiesProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withCookies(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App.jsx';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(<CookiesProvider><App /></CookiesProvider>, document.getElementById('root'));"],"sourceRoot":""}